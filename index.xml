<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sacre</title>
    <link>https://dream-yt.github.io/</link>
    <description>Recent content on sacre</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 16 Nov 2020 19:14:09 +0900</lastBuildDate>
    
	<atom:link href="https://dream-yt.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>pythonで辞書をdict()したときの値のコピーのされかたがshallow-copyなのを確認</title>
      <link>https://dream-yt.github.io/post/python-dict-constructor-shallow-copy/</link>
      <pubDate>Mon, 16 Nov 2020 19:14:09 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/python-dict-constructor-shallow-copy/</guid>
      <description>pythonで dict() を呼ぶとdict-likeな値をdictにキャストできる。 もとの辞書の値がコピーされているのだが、shallow copyなの</description>
    </item>
    
    <item>
      <title>chalice.Middleware の呼ばれる順番について</title>
      <link>https://dream-yt.github.io/post/chalice-middleware-decorator-call-order/</link>
      <pubDate>Mon, 16 Nov 2020 17:39:08 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/chalice-middleware-decorator-call-order/</guid>
      <description>chaliceにはMiddlewareと呼ばれる仕組みがある Middleware — AWS Chalice これを使うと、すべての関数に処理を挟み込むことができる。たとえば認証をし</description>
    </item>
    
    <item>
      <title>vscodeのformatOnSaveでPython/autopep8を使って整形する</title>
      <link>https://dream-yt.github.io/post/vscode-python-autopep8/</link>
      <pubDate>Sat, 07 Nov 2020 22:09:07 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/vscode-python-autopep8/</guid>
      <description>自動でフォーマットを効かせる最低限の設定 &amp;#34;settings&amp;#34;: { &amp;#34;[python]&amp;#34;: { &amp;#34;editor.formatOnSave&amp;#34;: true }, &amp;#34;python.formatting.autopep8Path&amp;#34;: &amp;#34;autopep8&amp;#34;, &amp;#34;python.formatting.autopep8Args&amp;#34;: [ &amp;#34;--aggressive&amp;#34;, &amp;#34;--aggressive&amp;#34; ] 参考 公式のドキュメントがトラブルシューティングを提供していて親切だった Editing</description>
    </item>
    
    <item>
      <title>VS Codeでインデントをハードタブにする</title>
      <link>https://dream-yt.github.io/post/vscode-using-hardtab/</link>
      <pubDate>Sat, 07 Nov 2020 21:59:28 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/vscode-using-hardtab/</guid>
      <description>この設定にするとTabキーでハードタブが挿入される &amp;quot;editor.insertSpaces&amp;quot;: false たとえば(pep8違反だが)Pythonだけで適用したい場合は下記のように書く &amp;#34;settings&amp;#34;: { &amp;#34;[python]&amp;#34;: {</description>
    </item>
    
    <item>
      <title>vscode で python の virtualenv を認識させる</title>
      <link>https://dream-yt.github.io/post/vscode-venv-python/</link>
      <pubDate>Sat, 07 Nov 2020 09:54:43 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/vscode-venv-python/</guid>
      <description>Cmd+Shift+p で Python: Select interpreter を選択 下記のような選択肢が出てくるので、使いたいpython/venvを選択 これで fn+F2 でライブラリの定義に飛べるようになる</description>
    </item>
    
    <item>
      <title>AWS Chalice でデプロイまで</title>
      <link>https://dream-yt.github.io/post/chalice-101/</link>
      <pubDate>Sat, 07 Nov 2020 00:20:37 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/chalice-101/</guid>
      <description>こちらに書いてある手順を踏んだだけ Quickstart — AWS Chalice $ python3 -m venv venv38 ... $ code .envrc ... $ pip install --upgrade pip $ pip install chalice $ chalice new-project sandbox $ chalice deploy Creating deployment package. Creating IAM role: sandbox-dev Creating lambda function: sandbox-dev Creating Rest API Resources deployed: - Lambda ARN: arn:aws:lambda:ap-northeast-1:xxxxxxxx:function:sandbox-dev - Rest API</description>
    </item>
    
    <item>
      <title>React.SuspenseとsetTimeoutで最小限の非同期コンポーネントをつくる</title>
      <link>https://dream-yt.github.io/post/react-suspense-settimeout-minimum/</link>
      <pubDate>Thu, 05 Nov 2020 15:07:42 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/react-suspense-settimeout-minimum/</guid>
      <description>こんなコードで1秒後に helloworld と表示できるコンポーネントが作れる // 「1秒以内はPromiseがthrowされて、1秒後にはundefinedが返っ</description>
    </item>
    
    <item>
      <title>html5のFileオブジェクトからimg/videoタグで使えるURLを取得する</title>
      <link>https://dream-yt.github.io/post/html5-read-file-data-ad-url/</link>
      <pubDate>Wed, 04 Nov 2020 15:27:45 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/html5-read-file-data-ad-url/</guid>
      <description>こんな関数で取得できる const f = (file: File) =&amp;gt; { const reader = new FileReader(); const promise = new Promise((resolve, reject) =&amp;gt; { reader.onerror = e =&amp;gt; reject(e); reader.onabort = e =&amp;gt; reject(e); reader.onload = e =&amp;gt; resolve(e.target?.result); }); reader.readAsDataURL(file); return promise; }; ... const url = f(event.currentTarget.files[0]); return &amp;lt;video&amp;gt;&amp;lt;source src={url} /&amp;gt;&amp;lt;/video&amp;gt; 参考 Web アプリケーショ</description>
    </item>
    
    <item>
      <title>React/Formikでファイルのドラッグアンドドロップ</title>
      <link>https://dream-yt.github.io/post/react-formik-file-dragndrop/</link>
      <pubDate>Sat, 31 Oct 2020 16:54:36 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/react-formik-file-dragndrop/</guid>
      <description>Formikに渡すコンポーネントはこんな感じのをつくる ドラッグアンドドロップを捕捉するためのイベントは onDragOver, onDragLeave Formikは input[type=file] に対応していないの</description>
    </item>
    
    <item>
      <title>throttle と debounce の違い</title>
      <link>https://dream-yt.github.io/post/difference-throttle-debounce/</link>
      <pubDate>Fri, 30 Oct 2020 18:39:11 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/difference-throttle-debounce/</guid>
      <description>こちらの説明がわかりやすかった throttleとdebounce lodash の debounce や throttle で簡単に負荷対策 - Qiita debounce 連続して大量に繰り返される処理が指定時間内に</description>
    </item>
    
    <item>
      <title>TypeScriptで、「この配列の要素がキーになってるオブジェクト」という型を定義する</title>
      <link>https://dream-yt.github.io/post/typescript-array-element-object-typing/</link>
      <pubDate>Wed, 28 Oct 2020 12:41:48 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/typescript-array-element-object-typing/</guid>
      <description>こんな感じでできる const columns = [&amp;#34;id&amp;#34;, &amp;#34;name&amp;#34;, &amp;#34;created&amp;#34;] as const; type Column = typeof columns[number]; // type Column = &amp;#34;id&amp;#34; | &amp;#34;name&amp;#34; | &amp;#34;created&amp;#34; type Obj = { [F in Column]: string }; typeof columns[number] がミソ What means typeof Array[number] in Typescript? - Stack Overflow</description>
    </item>
    
    <item>
      <title>VSCodeでワークスペースのpythonファイルだけオートフォーマットを無効にする</title>
      <link>https://dream-yt.github.io/post/turnoff-vscode-python-autoformat/</link>
      <pubDate>Thu, 15 Oct 2020 21:53:43 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/turnoff-vscode-python-autoformat/</guid>
      <description>半年に1回くらい設定してるのでメモ settingsからworkspaceの設定を開き、以下のように設定すればよい &amp;#34;settings&amp;#34;: { &amp;#34;[python]&amp;#34;: { &amp;#34;editor.formatOnSave&amp;#34;: false } } Turn off auto formatting for json</description>
    </item>
    
    <item>
      <title>Unicodeスカラー値と、対になっていないサロゲートコードポイントについてメモ</title>
      <link>https://dream-yt.github.io/post/read-usvstring-doc/</link>
      <pubDate>Tue, 13 Oct 2020 14:38:36 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/read-usvstring-doc/</guid>
      <description>この文章がよく分からなかったので単語について調べたときのメモ USVString - Web API | MDN USVString は、Unicode スカラー値（unicode scalar values）のすべ</description>
    </item>
    
    <item>
      <title>BOMつきUTF-8とjsについて</title>
      <link>https://dream-yt.github.io/post/bom-utf8-and-js/</link>
      <pubDate>Tue, 13 Oct 2020 12:14:06 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/bom-utf8-and-js/</guid>
      <description>まずBOMについて バイトオーダーマーク - Wikipedia BOMとはもともとはリトルエンディアンとビッグエンディアンのどちらかを判別するためにファイルの先頭</description>
    </item>
    
    <item>
      <title>BigQuery の Scheduled Query をCLIから登録/参照</title>
      <link>https://dream-yt.github.io/post/create-bigquery-scheduled-query-from-cli-bq/</link>
      <pubDate>Wed, 07 Oct 2020 19:01:35 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/create-bigquery-scheduled-query-from-cli-bq/</guid>
      <description>こんなコマンドで登録できる $ bq mk \ --transfer_config \ --data_source=scheduled_query \ --target_dataset=mydataset \ --display_name=&amp;#39;daily_update/$tablename&amp;#39; \ --schedule=&amp;#39;every day 18:00&amp;#39; \ --params=&amp;#34;$(cat $filename)&amp;#34; --schedule=&#39;every day 18:00&#39; ここで指定する時間はUTC --params=&amp;quot;\$(cat $filename)&amp;quot; {&amp;quot;query&amp;quot;:&amp;quot;SELECT 1&amp;quot;} みたいなJSONが入ってるファイルとす</description>
    </item>
    
    <item>
      <title>MySQLでマルチバイト文字が入ったレコードだけ取得する</title>
      <link>https://dream-yt.github.io/post/mysql-query-multibyte-string/</link>
      <pubDate>Wed, 23 Sep 2020 16:56:21 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/mysql-query-multibyte-string/</guid>
      <description>マルチバイト文字が入ってそうなカラムの文字列を CONVERT(x USING ASCII) して、元の文字列と差分があれば NOT ASCII な文字列が入っていると判断できる。 例 t.s がマルチバイト文</description>
    </item>
    
    <item>
      <title>flexで横並びカードのレイアウト最小限</title>
      <link>https://dream-yt.github.io/post/css-flex-horizontal-card/</link>
      <pubDate>Wed, 16 Sep 2020 09:22:10 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/css-flex-horizontal-card/</guid>
      <description>画像が左、説明文が右というレイアウトの最小限の定義 &amp;lt;div class=&amp;#34;card&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;card-left&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;https://thumbnail.image.rakuten.co.jp/@0_mall/book/cabinet/1989/19892000.jpg?_ex=200x200&amp;#34; /&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;card-right&amp;#34;&amp;gt; &amp;lt;h3&amp;gt;{book.title}&amp;lt;/h3&amp;gt; &amp;lt;p&amp;gt;{book.itemCaption}&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; .card { display: flex; /* PCで閲覧された時に横幅を絞っておく */ width: 600px; } .card-left { width: 30%;</description>
    </item>
    
    <item>
      <title>ffmpegを使ってmp3をカットする</title>
      <link>https://dream-yt.github.io/post/ffmpeg-cutout-mp3/</link>
      <pubDate>Sat, 12 Sep 2020 19:22:56 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/ffmpeg-cutout-mp3/</guid>
      <description>こんな感じで切り出せる ffmpeg -ss 7 -to 00:00:12 -i ./source.mp3 ./output.mp3 -ss 切り出す開始時点の秒数 -to 切り出す終了時点。ffmpegは秒数で指定するとわかりにくいのでこの形式 -i 元</description>
    </item>
    
    <item>
      <title>MySQL の CREATE TABLE から BigQuery のスキーマ(json)を生成する</title>
      <link>https://dream-yt.github.io/post/generate-bigquery-schema-from-mysql-create-table/</link>
      <pubDate>Fri, 11 Sep 2020 13:43:11 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/generate-bigquery-schema-from-mysql-create-table/</guid>
      <description>ddlparseというモジュールを使うと簡単だった shinichi-takii/ddlparse: DDL parase and Convert to BigQuery JSON schema and DDL statements コードはこれだけでよい import sys from ddlparse import DdlParse sql = sys.stdin.read() table = DdlParse().parse(sql) print(table.to_bigquery_fields()) こんな感じで生成さ</description>
    </item>
    
    <item>
      <title>既存のtypescriptプロジェクトにnextjsのSSGを導入する</title>
      <link>https://dream-yt.github.io/post/add-next-ssg-ts/</link>
      <pubDate>Sun, 06 Sep 2020 15:43:45 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/add-next-ssg-ts/</guid>
      <description>簡単に追加できる。 準備 nextを入れる $ npm install next src/pages配下にtsxを作成 $ touch ./src/pages/index.tsx なお、nextはトップレベルではなくsrc配下にpa</description>
    </item>
    
    <item>
      <title>cookiecutterでtypescript/jest/eslintのテンプレートを作った</title>
      <link>https://dream-yt.github.io/post/cookiecutter-typescript-jest-eslint/</link>
      <pubDate>Sun, 06 Sep 2020 14:00:34 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/cookiecutter-typescript-jest-eslint/</guid>
      <description>CRAだとnodejsのスクリプトを書くときとかは使えないのでcookiecutterにいいのがないか探してみたが、ちょっと古かったり(ts</description>
    </item>
    
    <item>
      <title>ページ内の全ての日本語を○△□に置き換える</title>
      <link>https://dream-yt.github.io/post/replace-all-japanese-in-page/</link>
      <pubDate>Sat, 05 Sep 2020 12:07:03 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/replace-all-japanese-in-page/</guid>
      <description>nodejs/express で開発をしていて、画面内の日本語をすべて記号に置き換えたい時があったのでこのようにした const replace = require(&amp;#39;stream-replace&amp;#39;); stream = stream .pipe(replace(/[ぁ-ん</description>
    </item>
    
    <item>
      <title>ReactでレンダリングしているページにGoogleAnalyticsを入れる&#34;</title>
      <link>https://dream-yt.github.io/post/react-render-google-analytics/</link>
      <pubDate>Sat, 05 Sep 2020 12:03:51 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/react-render-google-analytics/</guid>
      <description>なんかいろんなプラグインがnpmにあったが、自分で dangerouslySetInnerHTML で直接書いてしまうのが楽だった</description>
    </item>
    
    <item>
      <title>git bisect を使う</title>
      <link>https://dream-yt.github.io/post/git-bisect-101/</link>
      <pubDate>Thu, 03 Sep 2020 10:50:22 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/git-bisect-101/</guid>
      <description>たくさんコミットしてて、気がついたら関係なさそうなUIが動かなくなっていた場合など、 どのコミットが原因で動かなくなったかを割り出すのに git bisect が</description>
    </item>
    
    <item>
      <title>AWSでドメインを取得してfirebase-hostingに設定する</title>
      <link>https://dream-yt.github.io/post/firebase-hosting-customdomain-with-aws/</link>
      <pubDate>Thu, 03 Sep 2020 09:45:26 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/firebase-hosting-customdomain-with-aws/</guid>
      <description>だいたいドキュメント通りにやればできる カスタム ドメインを接続する | Firebase 手順 UIからポチポチやる場合の手順 (AWS) まずドメインを取得 (Firebase) カスタムドメイン</description>
    </item>
    
    <item>
      <title>httpリクエスト(v1.0で)のProxy</title>
      <link>https://dream-yt.github.io/post/http-10-proxy/</link>
      <pubDate>Sun, 30 Aug 2020 18:59:16 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/http-10-proxy/</guid>
      <description>読書メモ いままで「プロキシ」というのがhttp標準の技術だってことを知らなかった。httpsの場合だとCONNECTメソッドが出てきたりする</description>
    </item>
    
    <item>
      <title>iCloudドライブを使うようになった</title>
      <link>https://dream-yt.github.io/post/i-use-iclouddrive/</link>
      <pubDate>Sun, 30 Aug 2020 17:45:09 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/i-use-iclouddrive/</guid>
      <description>最近iCloudドライブをちゃんと使っている。もともとは新しいMacをプロビジョニングするための設定ファイルを入れていたのみだが、以下のリン</description>
    </item>
    
    <item>
      <title>webpack&#43;ts-loaderとtscで同じコードをトランスパイルした結果の違いをみてみる</title>
      <link>https://dream-yt.github.io/post/tsc-webpack-tsloader-code-diff/</link>
      <pubDate>Sat, 29 Aug 2020 17:19:29 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/tsc-webpack-tsloader-code-diff/</guid>
      <description>トランスパイルされる元のコードはこんな感じ index.ts import { f } from &amp;#39;./A&amp;#39;; console.log(&amp;#34;this is index&amp;#34;); f(); A.ts export const f = () =&amp;gt; console.log(&amp;#34;this is A.f&amp;#34;) このコードを以下の4パターンでトランスパイルしてみて、出</description>
    </item>
    
    <item>
      <title>gitignoreを生成してくれるgiboを使う</title>
      <link>https://dream-yt.github.io/post/gitignore-gibo-101/</link>
      <pubDate>Sat, 29 Aug 2020 12:29:04 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/gitignore-gibo-101/</guid>
      <description>giboは .gitignoreファイルを生成するソフトウェア VSCode や Node、 Rails などを引数で指定してそのプロジェクトに必要そうなgitignor</description>
    </item>
    
    <item>
      <title>[ansible x Raspbian] golang のインストール</title>
      <link>https://dream-yt.github.io/post/ansible-raspbian-install-golang/</link>
      <pubDate>Fri, 28 Aug 2020 00:26:50 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/ansible-raspbian-install-golang/</guid>
      <description>ansible-role-golang を使うとこのロールの設定だけで入る fubarhouse/ansible-role-golang: Installs the Go programming language and packages on Mac &amp;amp; Linux (Ubuntu, CentOS) vars: # golang go_version: 1.13.5 GOPATH: /usr/local/lib/go GOOS: linux GOARCH: arm # ソースからインストールするためにいったんgo1.4を</description>
    </item>
    
    <item>
      <title>[ansible x Raspbian] nodejs のインストール</title>
      <link>https://dream-yt.github.io/post/ansible-raspbian-install-nodejs/</link>
      <pubDate>Fri, 28 Aug 2020 00:07:02 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/ansible-raspbian-install-nodejs/</guid>
      <description>ansible-role-nodejs を使うとラズパイでも簡単に入る geerlingguy/ansible-role-nodejs: Ansible Role - Node.js 一緒に npm -g install yarn もしてもらうような最小限の設定 vars: nodejs_version: &amp;#34;12.x&amp;#34; nodejs_npm_global_packages: - yarn roles: - ansible-role-nodejs 環境 Raspbian Buster Lite で動作 Download Raspbian for Raspberry Pi</description>
    </item>
    
    <item>
      <title>ts-migrateをつかった</title>
      <link>https://dream-yt.github.io/post/ts-migrate-101/</link>
      <pubDate>Wed, 26 Aug 2020 14:08:12 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/ts-migrate-101/</guid>
      <description>ちょうど ts に移行する雰囲気があったので使ってみた airbnb/ts-migrate: A tool to help migrate JavaScript code quickly and conveniently to TypeScript ts-migrate がやってくれること 主な機能は以下の2つ $ ts-migrate rename js =&amp;gt; ts のリネーム $ ts-migrate</description>
    </item>
    
    <item>
      <title>TypeScriptでjQueryプラグインにて追加した関数の型定義</title>
      <link>https://dream-yt.github.io/post/typescript-jquery-plugin-method-typing/</link>
      <pubDate>Mon, 17 Aug 2020 18:22:13 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/typescript-jquery-plugin-method-typing/</guid>
      <description>index.d.ts ファイルを用意して以下のようにメソッドを追加すればよい interface JQuery { foo(arg: string): jQuery; } jQueryはネームスペースを切らずに型を定義しているので、グローバル</description>
    </item>
    
    <item>
      <title>TypeScriptで外部スクリプトからロードされたグローバル変数のエラーを無視する</title>
      <link>https://dream-yt.github.io/post/typescipt-ignore-global-from-3rd-party-js/</link>
      <pubDate>Mon, 17 Aug 2020 18:11:09 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/typescipt-ignore-global-from-3rd-party-js/</guid>
      <description>GoogleChartはnpmパッケージになっておらず、またローカルにファイルを置くことが許可されていない Sorry; our terms of service do not allow you to download and save or host the google.charts.load</description>
    </item>
    
    <item>
      <title>fdでsrc配下のjsファイルをtsに一括でrenameする</title>
      <link>https://dream-yt.github.io/post/fd-rename-js-ts-in-project/</link>
      <pubDate>Mon, 17 Aug 2020 17:07:35 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/fd-rename-js-ts-in-project/</guid>
      <description>fdを使うとこんな塩梅になる fd --glob &amp;#39;*.js&amp;#39; ./src --exec mv {//}/{/.}.js {//}/{/.}.ts --glob &#39;*.js&#39; jsファイルのみを対象にする ./src ファイルを探すパス --exec mv {//}/{/.}.js {//}/{/.}.ts 見つかったファイル1つ1つに対して処</description>
    </item>
    
    <item>
      <title>mp4のatomとは</title>
      <link>https://dream-yt.github.io/post/mp4-atom-fast-start/</link>
      <pubDate>Thu, 13 Aug 2020 17:03:54 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/mp4-atom-fast-start/</guid>
      <description>atomとはmp4ファイルを構成する要素 atomはboxとも呼ばれる メタデータもコンテンツもatomに格納されている ftyp: このmp4ファイルが準</description>
    </item>
    
    <item>
      <title>動画ファイル、コンテナとコーデックとは</title>
      <link>https://dream-yt.github.io/post/video-file-container-codec/</link>
      <pubDate>Thu, 13 Aug 2020 15:51:33 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/video-file-container-codec/</guid>
      <description>コンテナ コンテナとは動画ファイルをつくるための仕様のこと mp4はコンテナだが、以下もコンテナの種類の名前である webm flv wav (主にwindows) コ</description>
    </item>
    
    <item>
      <title>mp4dumpでmp4ファイルのメタデータ(atom)をJSONで取得する</title>
      <link>https://dream-yt.github.io/post/dump-mp4-atom-in-json/</link>
      <pubDate>Wed, 12 Aug 2020 18:34:01 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/dump-mp4-atom-in-json/</guid>
      <description>mp4dumpを使うとJSON形式で取得できる $ mp4dump ./test.mp4 --format json &amp;gt; /tmp/_ $ mp4dump ./test.mp4 --format json | jq . | head -30 [ { &amp;#34;name&amp;#34;: &amp;#34;ftyp&amp;#34;, &amp;#34;header_size&amp;#34;: 8, &amp;#34;size&amp;#34;: 28, &amp;#34;major_brand&amp;#34;: &amp;#34;mp42&amp;#34;, &amp;#34;minor_version&amp;#34;: 0, &amp;#34;compatible_brand&amp;#34;: &amp;#34;avc1&amp;#34; }, { &amp;#34;name&amp;#34;: &amp;#34;moov&amp;#34;, &amp;#34;header_size&amp;#34;: 8, &amp;#34;size&amp;#34;: 9187, &amp;#34;children&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;mvhd&amp;#34;, &amp;#34;header_size&amp;#34;: 12,</description>
    </item>
    
    <item>
      <title>/usr/local/Cellar/pyenv/1.2.8/libexec/pyenv: No such file or directory</title>
      <link>https://dream-yt.github.io/post/libexec-pyenv-no-such-file/</link>
      <pubDate>Wed, 12 Aug 2020 11:49:42 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/libexec-pyenv-no-such-file/</guid>
      <description>brewで色々アップグレードされたあと、pyenvで入れたpythonが動かなくなることがある $ code /Users/sakamoto/.pyenv/shims/python: 行 21: /usr/local/Cellar/pyenv/1.2.8/libexec/pyenv: No such file or directory /usr/local/bin/code: 行 10: ./MacOS/Electron: No such file or directory pye</description>
    </item>
    
    <item>
      <title>C&#43;&#43;のビルドステップと静的/動的ライブラリについて</title>
      <link>https://dream-yt.github.io/post/cpp-buildstep-and-static-dynamic/</link>
      <pubDate>Fri, 07 Aug 2020 16:39:09 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/cpp-buildstep-and-static-dynamic/</guid>
      <description>ビルドのステップ プリプロセッサ #include の処理 #ifdef とかの処理 コンパイラ ソースファイルひとつからアセンブリファイルひとつを生成する #include された関数などは、ヘ</description>
    </item>
    
    <item>
      <title>jqである属性(配列)が空じゃないもののみに絞る</title>
      <link>https://dream-yt.github.io/post/jq-select-not-empty-array/</link>
      <pubDate>Thu, 06 Aug 2020 18:42:29 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/jq-select-not-empty-array/</guid>
      <description>select と length を使えばよい cat data.json | jq &amp;#39;select(.errors | length &amp;gt; 0) 参考 length select</description>
    </item>
    
    <item>
      <title>rrwebがバグの調査に使えそうというメモ</title>
      <link>https://dream-yt.github.io/post/rrweb-usecase-for-debugging/</link>
      <pubDate>Thu, 06 Aug 2020 15:48:59 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/rrweb-usecase-for-debugging/</guid>
      <description>rrwebはサイトでユーザがなにをしたかを記録できるというもの rrweb-io/rrweb: record and replay the web rrweb refers to &amp;lsquo;record and replay the web&amp;rsquo;, which is a tool for recording and replaying users&amp;rsquo; interactions on the web. ユーザの行動調査のために</description>
    </item>
    
    <item>
      <title>emojiで肌とか性別とか髪の色が変えられる仕組み</title>
      <link>https://dream-yt.github.io/post/unicode-emoji-modifier-zwj/</link>
      <pubDate>Thu, 06 Aug 2020 12:05:18 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/unicode-emoji-modifier-zwj/</guid>
      <description>unicodeでは肌の色を変えられる仕組みが2015年から入っている。これは skin tone modifiers と呼ばれるもので、結合文字のようにベースとなる絵文字の後ろ</description>
    </item>
    
    <item>
      <title>jsでマルチバイト文字にあてる正規表現はuフラグをつける</title>
      <link>https://dream-yt.github.io/post/js-multibyte-regex-uflag/</link>
      <pubDate>Mon, 03 Aug 2020 10:19:16 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/js-multibyte-regex-uflag/</guid>
      <description>理由 jsの文字列は内部でUTF-16を使っている jsで文字列の1文字は1つのコードユニットを指し、コードポイントを指すわけではない 例 👶🏼.l</description>
    </item>
    
    <item>
      <title>lodash@4.17.16 の脆弱性修正について</title>
      <link>https://dream-yt.github.io/post/lodash-fix-4-17-16/</link>
      <pubDate>Tue, 28 Jul 2020 12:23:16 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/lodash-fix-4-17-16/</guid>
      <description>4.17.16 にていくつかの脆弱性が修正されている Releases · lodash/lodash template, zipObjectDeep あたりを使ってトリッキーなコードをかいていなければ挙動に変更はなさそうである sourceUR</description>
    </item>
    
    <item>
      <title>jsファイルの容量削減 lodash/jQuery</title>
      <link>https://dream-yt.github.io/post/diet-js-bundle-file/</link>
      <pubDate>Sat, 25 Jul 2020 00:01:24 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/diet-js-bundle-file/</guid>
      <description>webpackの設定がよくなかったのか、生成したバンドルjsファイルが重かったので若干雑な感じで軽くした lodashは全部読み込むと結構重い</description>
    </item>
    
    <item>
      <title>serverless-plugin-aws-alertsでエラーを監視</title>
      <link>https://dream-yt.github.io/post/serverless-plugin-aws-alerts-101/</link>
      <pubDate>Sun, 05 Jul 2020 20:48:54 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/serverless-plugin-aws-alerts-101/</guid>
      <description>Serverless Framework を使っている場合、エラーやタイムアウトなどの検知をするためのリソースはプラグインで簡単に簡単に生成できる ACloudGuru/serverless-plugin-aws-alerts: A Serverless Framework plugin that creates CloudWatch alarms for functions. たとえば「</description>
    </item>
    
    <item>
      <title>bashの変数から文字列を取り出す</title>
      <link>https://dream-yt.github.io/post/bash-substring-extraction/</link>
      <pubDate>Thu, 25 Jun 2020 12:22:41 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/bash-substring-extraction/</guid>
      <description>以下のような記法で変数から部分文字列を取り出すことができる ${FOO%...} ${FOO#...} string - Extract substring in Bash - Stack Overflow 例 ui/src/js/test/tag.js という文字列から test/tag.js という文字列を取り出す場合 ui/src/ という文字</description>
    </item>
    
    <item>
      <title>雑create-react-app のデプロイについて</title>
      <link>https://dream-yt.github.io/post/create-react-app-rough-deploy/</link>
      <pubDate>Thu, 18 Jun 2020 10:38:39 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/create-react-app-rough-deploy/</guid>
      <description>init こんな感じで開発を始める npm install -g create-react-app npx create-react-app {{ アプリ名 }} --typescript yarn start build ビルドコマンドはデフォルトで用意されている yarn build これを実行すると ./build 配下にhtmlなど</description>
    </item>
    
    <item>
      <title>[jest] SyntaxError: The string did not match the expected pattern</title>
      <link>https://dream-yt.github.io/post/axios-syntaxerror/</link>
      <pubDate>Sun, 07 Jun 2020 06:46:32 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/axios-syntaxerror/</guid>
      <description>axios を使った jest のテストで以下のようなエラーが出た SyntaxError: The string did not match the expected pattern. これは jest ランタイムだと axios が XMLHttpRequest を使おうとしてしまうため発生するエラーだったよう</description>
    </item>
    
    <item>
      <title>CloudLogging で監査ログを除外する</title>
      <link>https://dream-yt.github.io/post/exclude-gcp-audit-log/</link>
      <pubDate>Fri, 05 Jun 2020 07:08:03 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/exclude-gcp-audit-log/</guid>
      <description>GCPには、ユーザの操作などを記録する監査ログがデフォルトで有効になっているサービスがいくつかある 監査ログについて | Cloud Logging | Google Cloud BigQuery の監査ログが</description>
    </item>
    
    <item>
      <title>SlackAPI よりチャンネルとアイコンとユーザ名を変更してポストする</title>
      <link>https://dream-yt.github.io/post/slack-get-postmessage-token/</link>
      <pubDate>Fri, 05 Jun 2020 01:04:32 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/slack-get-postmessage-token/</guid>
      <description>現在、Slack は昔ながらの Webhook の方式ではチャンネルとアイコンとユーザ名をすべてデフォルトから変更してポストできなくなっている Sending messages using Incoming Webhooks | Slack You</description>
    </item>
    
    <item>
      <title>LogEntry からそのログ周辺へのCloudLogging のURLを生成する</title>
      <link>https://dream-yt.github.io/post/gcp-cloudlogging-entry-url/</link>
      <pubDate>Thu, 04 Jun 2020 16:21:16 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/gcp-cloudlogging-entry-url/</guid>
      <description>こんな処理をつくるとき CloudLogging でエラーログを補足したら そのログを PubSub にシンクして それを CloudFunction でSlackに通知する 通知メッセージの中にそのログへのリンク</description>
    </item>
    
    <item>
      <title>GCPのプロジェクトにユーザを招待する</title>
      <link>https://dream-yt.github.io/post/invite-account-to-gcp-project/</link>
      <pubDate>Wed, 03 Jun 2020 18:04:08 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/invite-account-to-gcp-project/</guid>
      <description>GCPの管理コンソールの IAM から行う IAM 追加 招待したい人のメールアドレスを入力 与えたい権限を選択</description>
    </item>
    
    <item>
      <title>CloudFunction で CloudBuild をトリガーする </title>
      <link>https://dream-yt.github.io/post/gcp-trigger-cloudbuild-via-cloudfunction/</link>
      <pubDate>Mon, 01 Jun 2020 16:31:19 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/gcp-trigger-cloudbuild-via-cloudfunction/</guid>
      <description>まずgcloudで既存のトリガーの一覧を確認しておく $ gcloud beta builds triggers list --- createTime: &amp;#39;2020-05-06T13:01:33.647678872Z&amp;#39; description: master ブランチへの push filename: site/cloudbuild.yaml github: name: test owner: admin push: branch: ^master$ id: 0e2bd416-129f-44a3-b7ed-79c3c61e021a name: master-push-trigger tags: - github-default-push-trigger nodejsで呼び</description>
    </item>
    
    <item>
      <title>Firebase Cloudfunction のデプロイに webpack を使ってビルドしようとするメモ</title>
      <link>https://dream-yt.github.io/post/cloudfunction-build-via-webpack-memo/</link>
      <pubDate>Sun, 31 May 2020 19:03:18 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/cloudfunction-build-via-webpack-memo/</guid>
      <description>次のような理由で Cloudfunction のビルドに webpack が使いたくなった jsonファイルを require したい sqlファイルを raw-loader で require したい 最終的に webpack は不要にしたが、調べたことをメ</description>
    </item>
    
    <item>
      <title>htmlではaタグはネストできない</title>
      <link>https://dream-yt.github.io/post/html-nested-anchor/</link>
      <pubDate>Tue, 19 May 2020 08:12:33 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/html-nested-anchor/</guid>
      <description>htmlではaタグがネストできない。できないと言うか、そういうコードを書くとブラウザがDOM構造をネストのない形に勝手に変更する。警告はでな</description>
    </item>
    
    <item>
      <title>MySQLで、URLからホスト部まで抜き出す</title>
      <link>https://dream-yt.github.io/post/mysql-extract-hostname-from-url/</link>
      <pubDate>Wed, 13 May 2020 12:56:31 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/mysql-extract-hostname-from-url/</guid>
      <description>ちょっとサボって https:// などのスキーマ部も入る形 SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(url, &amp;#39;/&amp;#39;, 3), &amp;#39;?&amp;#39;, 1) FROM t 参考 熱い議論が交わされている Mysql query to extract domains from urls - Stack Overflow</description>
    </item>
    
    <item>
      <title>cloudrun にデプロイする cloudbuild.yaml</title>
      <link>https://dream-yt.github.io/post/cloudbuild-cloudrun/</link>
      <pubDate>Thu, 07 May 2020 23:20:24 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/cloudbuild-cloudrun/</guid>
      <description>トリガー まず、cloudbuildのトリガーをこんな感じで登録しておく ^master$ のときに変数が _SERVICE=service となるように ^canary/ のときに変数が _SERVICE=service-canary となるように cloudbuild.yaml timeout: &amp;#39;900s&amp;#39; steps: -</description>
    </item>
    
    <item>
      <title>GCP の cloudbuild を ローカルで実行する</title>
      <link>https://dream-yt.github.io/post/gcp-cloud-build-local/</link>
      <pubDate>Thu, 07 May 2020 08:29:36 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/gcp-cloud-build-local/</guid>
      <description>cloud-build-local というツールがあり、公式のドキュメント通りにやればだいたいできる Building and debugging locally | Cloud Build Documentation 作業ディレクトリ ビルドを実施するディレクトリは cloudbuild.yaml があるディ</description>
    </item>
    
    <item>
      <title>typescript で express を watch しながら開発する</title>
      <link>https://dream-yt.github.io/post/typescript-express-watch-develop/</link>
      <pubDate>Wed, 06 May 2020 21:41:26 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/typescript-express-watch-develop/</guid>
      <description>nodemon と ts-node を使えばできる たとえば src/index.tsx が express アプリなら以下のコマンドになる nodemon -r ts-node/register ./src/index.tsx nodemon 配下のファイルが変更されたらサーバをリロードしてくれる -r ts-node/register ./src/index.tsx index.tsx を tsconfig.json</description>
    </item>
    
    <item>
      <title>誰かのnpmパッケージに機能追加して、本番で動作確認してからプルリクエストを出す</title>
      <link>https://dream-yt.github.io/post/develop-npm-package-and-pull-request/</link>
      <pubDate>Mon, 04 May 2020 23:19:32 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/develop-npm-package-and-pull-request/</guid>
      <description>たとえばつぎのような場合 プロジェクト service でつかっている api-client パッケージを使っている api-client に機能を追加したくなった api-client で機能追加 まず api-client を GitHub で fork してローカル</description>
    </item>
    
    <item>
      <title>開発中のパッケージをrequireできる npm link を使う</title>
      <link>https://dream-yt.github.io/post/npm-link/</link>
      <pubDate>Mon, 04 May 2020 22:36:52 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/npm-link/</guid>
      <description>npmパッケージを開発するとき、いちいちnpmにアップロードしてそれを使う側でinstallしてなどとやってられないので npm link という仕組みがあ</description>
    </item>
    
    <item>
      <title>Firebase Hosting のサイトを削除する</title>
      <link>https://dream-yt.github.io/post/remove-firebase-hosting/</link>
      <pubDate>Sat, 02 May 2020 10:01:52 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/remove-firebase-hosting/</guid>
      <description>firebase hosting は以下の要領でサイトを消すことができる まずはdisableに $ firebase hosting:disable ? Are you sure you want to disable Firebase Hosting? This will immediately make your site inaccessible! Yes ✔ Hosting has been disabled for pjx-112312. Deploy a new version to re-enable. リリース</description>
    </item>
    
    <item>
      <title>bashのfor文の中身を並列処理させる</title>
      <link>https://dream-yt.github.io/post/shell-for-parallel/</link>
      <pubDate>Thu, 30 Apr 2020 18:01:37 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/shell-for-parallel/</guid>
      <description>こんなスクリプトがあったとして for i ($find ./src); do somecommand $i done forの中身 (somecommand) を並列で実行したい場合はこうすればよい for i ($find ./src); do somecommand $i &amp;amp; done wait いままでxargsを使</description>
    </item>
    
    <item>
      <title>YouTube DataAPIv3 でプレイリストに動画を追加する</title>
      <link>https://dream-yt.github.io/post/youtube-data-api-insert-playlistitems/</link>
      <pubDate>Wed, 29 Apr 2020 12:41:01 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/youtube-data-api-insert-playlistitems/</guid>
      <description>工程はこんな感じになる GCPのコンソールでYouTubeDataAPIv3をenableにする OAuthトークンを取得 youtube.playlistItems.insert を呼ぶ トークンを取得</description>
    </item>
    
    <item>
      <title>複数属性をもつ要素を指定するCSSセレクタ</title>
      <link>https://dream-yt.github.io/post/css-selector-multiple-attributes/</link>
      <pubDate>Mon, 27 Apr 2020 10:23:34 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/css-selector-multiple-attributes/</guid>
      <description>たとえばこんな要素に複数の属性でマッチさせたい場合 &amp;lt;input type=&amp;#34;file&amp;#34; multiple /&amp;gt; こんな指定になる input[type=&amp;#34;file&amp;#34;][multiple] { ... } 参考 Specify multiple attribute selectors in CSS - Stack Overflow</description>
    </item>
    
    <item>
      <title>Terraform(AWS)でDNSのTXTレコードを作成する</title>
      <link>https://dream-yt.github.io/post/aws-terraform-dns-txt-record/</link>
      <pubDate>Sun, 26 Apr 2020 22:43:04 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/aws-terraform-dns-txt-record/</guid>
      <description>Googleのサーチコンソールの認証をDNSでしたかったのでterraformで設定した TXTレコードの値は records の中に入れる resource &amp;quot;aws_route53_record&amp;quot; &amp;quot;b_n-t_jp__txt&amp;quot; { zone_id = &amp;quot;${aws_route53_zone.n_t.zone_id}&amp;quot; name =</description>
    </item>
    
    <item>
      <title>nodejsのEvent Loopについておおまかなメモ</title>
      <link>https://dream-yt.github.io/post/nodejs-event-loop/</link>
      <pubDate>Sun, 19 Apr 2020 13:35:05 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/nodejs-event-loop/</guid>
      <description>nodejsのイベントループは次の6個のフェーズからなる timers pending callbacks idle, prepare poll check close callbacks この6個のフェーズの1周はラウンドと呼ばれる それぞれのフェーズはそ</description>
    </item>
    
    <item>
      <title>hive(athena)の InputFormat, OutputFormat, SerDe</title>
      <link>https://dream-yt.github.io/post/hive-table-input-output-serde/</link>
      <pubDate>Sat, 18 Apr 2020 13:01:07 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/hive-table-input-output-serde/</guid>
      <description>hive の create table は次のようなものである CREATE TABLE test(id INT, name STRING) ROW FORMAT SERDE &amp;#39;org.apache.hadoop.hive.serde2.avro.AvroSerDe&amp;#39; STORED as INPUTFORMAT &amp;#39;org.apache.hadoop.hive.ql.io.avro.AvroContainerInputFormat&amp;#39; OUTPUTFORMAT &amp;#39;org.apache.hadoop.hive.ql.io.avro.AvroContainerOutputFormat&amp;#39; このなかの SERDE, INPUTFORMAT, OUTPUTFORMAT についてメモ INPUTFORMAT, OUTPUTFORMAT hive には external storage と hive warehouse 2種類のデータストアがある これ</description>
    </item>
    
    <item>
      <title>WithingsAPIのトークンのを取得</title>
      <link>https://dream-yt.github.io/post/withings-api-101/</link>
      <pubDate>Thu, 16 Apr 2020 20:41:10 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/withings-api-101/</guid>
      <description>トークンの取得 Withings API codeを取得 管理画面から CLIENT_ID , CONSUMER_SECRET を発行する dashboard_oauth2 export CLIENT_ID=xxxx export CONSUMER_SECRET=xxxxxxxx export REDIRECT_URL=http://localhost:8000 export SCOPE=user.info,user.metrics,user.activity,user.sleepevents export STATE=sakamoto # リクエストが重複しないようにするためのなんでもいい文字列</description>
    </item>
    
    <item>
      <title>runtime-only build of Vue where the template compiler is not available</title>
      <link>https://dream-yt.github.io/post/vue-jest-runtime-only-build-warn/</link>
      <pubDate>Tue, 14 Apr 2020 12:15:24 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/vue-jest-runtime-only-build-warn/</guid>
      <description>vueコンポーネントが混ざったjsのテストで以下のようなwarningがでる [Vue warn]: You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build これは</description>
    </item>
    
    <item>
      <title>vscode-eslint(v2)の設定をする</title>
      <link>https://dream-yt.github.io/post/vscode-eslint-v2/</link>
      <pubDate>Fri, 10 Apr 2020 15:58:01 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/vscode-eslint-v2/</guid>
      <description>こんな設定になった { &amp;#34;[javascript]&amp;#34;: { &amp;#34;editor.codeActionsOnSave&amp;#34;: { &amp;#34;source.fixAll.eslint&amp;#34;: true }, &amp;#34;editor.tabSize&amp;#34;: 2 }, &amp;#34;eslint.enable&amp;#34;: true, &amp;#34;eslint.alwaysShowStatus&amp;#34;: true, &amp;#34;eslint.debug&amp;#34;: false, &amp;#34;eslint.format.enable&amp;#34;: true, &amp;#34;eslint.lintTask.enable&amp;#34;: true, &amp;#34;eslint.workingDirectories&amp;#34;: [ { &amp;#34;mode&amp;#34;: &amp;#34;auto&amp;#34; } ] } editor.codeActionsOnSave vscode-eslintはv2からこんな設定になっている https://github.com/microsoft/vscode-eslint#release-notes &amp;#34;editor.codeActionsOnSave&amp;#34;:</description>
    </item>
    
    <item>
      <title>RSSHubにPR出すときのメモ</title>
      <link>https://dream-yt.github.io/post/contribute-rsshub-memo/</link>
      <pubDate>Sun, 29 Mar 2020 20:45:55 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/contribute-rsshub-memo/</guid>
      <description>DIYgod/RSSHub: 🍰 Everything is RSSible まず先にfetch $ git remote add upstream ssh://git@github.com/DIYgod/RSSHub.git $ git fetch upstream 開発者向けのドキュメント Join Us | RSSHub 開発用のコマンド 使うのはこのへん $ yarn dev $ yarn docs:dev $ cat package.json | jq .scripts { &amp;quot;start&amp;quot;:</description>
    </item>
    
    <item>
      <title>s3オブジェクトのタグに使える文字</title>
      <link>https://dream-yt.github.io/post/charactors-allowed-on-s3tag/</link>
      <pubDate>Sat, 28 Mar 2020 15:46:19 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/charactors-allowed-on-s3tag/</guid>
      <description>パッとググっても出てこなかったので Tagging Your Amazon EC2 Resources - Amazon Elastic Compute Cloud The allowed characters across services are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @. % が使えないのでURLエスケープはで</description>
    </item>
    
    <item>
      <title>ttyとは</title>
      <link>https://dream-yt.github.io/post/what-is-tty/</link>
      <pubDate>Sat, 28 Mar 2020 14:37:28 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/what-is-tty/</guid>
      <description>プロセスは2種類に分けられる シェルなど、ユーザのインタラクションを受け付けるプロセス そうではないデーモンプロセス この2つを区別するのが、「プ</description>
    </item>
    
    <item>
      <title>Windows初心者の設定</title>
      <link>https://dream-yt.github.io/post/windows-newbie/</link>
      <pubDate>Sat, 14 Mar 2020 12:07:18 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/windows-newbie/</guid>
      <description>10年ぶりのwindows 完全にPC初心者の気持ちがわかる状態なのでメモっておく cmd(windows)キーとctrlキーの入れ替え Apple Wireless Keyboard を</description>
    </item>
    
    <item>
      <title>golangで相対パスっぽいimportをできるようにする</title>
      <link>https://dream-yt.github.io/post/golang-rel-like-path-import/</link>
      <pubDate>Fri, 13 Mar 2020 17:54:21 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/golang-rel-like-path-import/</guid>
      <description>※ おそらくよくないやりかたである goではv1.11から相対パスのimportができなくなったとのこと Go1.11からのGo Modulesでは</description>
    </item>
    
    <item>
      <title>ポートフォワードしてリモートのMySQLに接続する</title>
      <link>https://dream-yt.github.io/post/portforward-remote-mysql/</link>
      <pubDate>Thu, 27 Feb 2020 16:50:22 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/portforward-remote-mysql/</guid>
      <description>リモートワークになったのでローカルの環境構築をしている 各種変数を設定 export SSH_USER=mossan # `SSH_HOST` はここでは踏み台ホストのこと export SSH_HOST=xxx.xxx.xxx.xxx export DB_HOST=xxx.xxx.xxx.xxx export DB_USER=app export DB_NAME=prod ポートフォワード設定</description>
    </item>
    
    <item>
      <title>webpackの開発用に便利なオプション</title>
      <link>https://dream-yt.github.io/post/webpack-dev-options/</link>
      <pubDate>Wed, 26 Feb 2020 18:26:57 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/webpack-dev-options/</guid>
      <description>1ファイルだけトランスパイルするならこんな感じ $ npx webpack $entry --output $output \ --progress \ --cache=true \ --display-error-details \ --debug \ --devtool eval-cheap-module-source-map \ --output-pathinfo \ --watch --progress 動作重い時でも動いているかどうかわかるだけで便利 --cache=true</description>
    </item>
    
    <item>
      <title>fdを使う</title>
      <link>https://dream-yt.github.io/post/fd-instead-of-find-101/</link>
      <pubDate>Wed, 26 Feb 2020 16:34:33 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/fd-instead-of-find-101/</guid>
      <description>rustで GNU Core Utilities 実装してみたよシリーズであるところのfdコマンド sharkdp/fd: A simple, fast and user-friendly alternative to &amp;lsquo;find&amp;rsquo; 老害が嫌がりそうなプロジェクトで好感が持てます インストール</description>
    </item>
    
    <item>
      <title>alpine に gcloud をインストールする Dockerfile</title>
      <link>https://dream-yt.github.io/post/install-gcloud-to-alpine/</link>
      <pubDate>Fri, 21 Feb 2020 09:23:30 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/install-gcloud-to-alpine/</guid>
      <description>curl, bash, python, が必要 PATHを通す (root配下にインストールされた) FROMnode:10-alpineRUN apk --no-cache add curl bash pythonRUN curl -sSL https://sdk.cloud.google.com | bashENV PATH $PATH:/root/google-cloud-s</description>
    </item>
    
    <item>
      <title>cloudrun/cloudscheduler入門</title>
      <link>https://dream-yt.github.io/post/cloudrun-cloudscheduler-101/</link>
      <pubDate>Tue, 18 Feb 2020 09:09:40 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/cloudrun-cloudscheduler-101/</guid>
      <description>毎日決まった時間にスクリプトを実行したい要求があったので、マネージドの環境で実行できるcloudrun/cloudschedulerを試して</description>
    </item>
    
    <item>
      <title>ERROR: (gcloud.beta.scheduler.jobs.create.http) INVALID_ARGUMENT</title>
      <link>https://dream-yt.github.io/post/cloudscheduler-error-invalid_argument/</link>
      <pubDate>Mon, 17 Feb 2020 09:48:04 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/cloudscheduler-error-invalid_argument/</guid>
      <description>GCPのCloudSchedulerの設定で以下のようなコマンドを叩いたところエラーとなった gcloud beta scheduler jobs create http subcommandtesting-out-job \ --schedule &amp;#34;5 * * * *&amp;#34; \ --http-method=GET \ --uri=&amp;#39;https://test-iujvxwvxra-an.a.run.app/test/out&amp;#39; \ --oidc-service-account-email=&amp;#39;xxxxxxxx@gmail.com&amp;#39; ERROR: (gcloud.beta.scheduler.jobs.create.http) INVALID_ARGUMENT: Request</description>
    </item>
    
    <item>
      <title>ERROR: (gcloud.beta.run.deploy) PERMISSION_DENIED</title>
      <link>https://dream-yt.github.io/post/cloudrun-error-permission-denied/</link>
      <pubDate>Mon, 17 Feb 2020 09:08:49 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/cloudrun-error-permission-denied/</guid>
      <description>CloudRunのデプロイ時にこんなログが出た ERROR: (gcloud.beta.run.deploy) PERMISSION_DENIED: Permission denied on &amp;lsquo;locations/asia-northeast1-a&amp;rsquo; (or it may not exist) フル権限のユーザで作業しているはずなので PERMISSION_DENIED といわれても原因がピンとこな</description>
    </item>
    
    <item>
      <title>nodejsで標準入出力/エラーを共有した子プロセスを作る</title>
      <link>https://dream-yt.github.io/post/nodejs-spawn-inherit-stdout-stderr/</link>
      <pubDate>Fri, 14 Feb 2020 11:26:41 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/nodejs-spawn-inherit-stdout-stderr/</guid>
      <description>cloudrunを使う際に必要になった cloudrunはhttpエンドポイントから処理がキックされるので、コンテナでbashコマンドを実行し</description>
    </item>
    
    <item>
      <title>psコマンドでメモリ使用量, CPU使用量でソートする</title>
      <link>https://dream-yt.github.io/post/ps-mem-cpu-sort/</link>
      <pubDate>Wed, 12 Feb 2020 09:37:33 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/ps-mem-cpu-sort/</guid>
      <description>--sort オプションがある 例 -%mem は降順、メモリ使用量という意味 root@92b0f68c3eb3:/# ps aux --sort -%mem | head USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 1 0.0 0.1 18240 3236 pts/0 Ss 00:20 0:00 /bin/bash root 20 0.0 0.1 34424 2780 pts/0 R+ 00:22 0:00 ps aux --sort -%mem root</description>
    </item>
    
    <item>
      <title>Bash Elif</title>
      <link>https://dream-yt.github.io/post/bash-elif/</link>
      <pubDate>Wed, 12 Feb 2020 09:15:26 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/bash-elif/</guid>
      <description></description>
    </item>
    
    <item>
      <title>シェルスクリプトで変数が未定義かを確認する</title>
      <link>https://dream-yt.github.io/post/bash-non-zero-variable/</link>
      <pubDate>Wed, 12 Feb 2020 09:06:11 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/bash-non-zero-variable/</guid>
      <description>毎回忘れるのでメモ -n で判定できる。逆は -z。 正確には値のlengthがnon-zeroかという判定をしている main.sh #!/bin/bash [ -n &amp;#34;$ONE&amp;#34; ] &amp;amp;&amp;amp; echo &amp;#34;ONE is non-zero&amp;#34; [ -z &amp;#34;$ONE&amp;#34; ] &amp;amp;&amp;amp;</description>
    </item>
    
    <item>
      <title>Cloud Runの動作確認 (イメージのビルド、デプロイと削除)</title>
      <link>https://dream-yt.github.io/post/testing-cloudrun/</link>
      <pubDate>Wed, 12 Feb 2020 08:29:32 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/testing-cloudrun/</guid>
      <description>システム パッケージのチュートリアルを使用する | Cloud Run | Google Cloud $ gcloud builds submit を叩くと、Dockerfileをもとにビルドが始まる $ gcloud builds submit --tag gcr.io/$GOOGLE_PROJECT_ID/graphvizn ... snip ... 10-alpine: Pulling from</description>
    </item>
    
    <item>
      <title>ERROR:root:code for hash md5 was not found</title>
      <link>https://dream-yt.github.io/post/code-for-hash-md5-was-not-found/</link>
      <pubDate>Thu, 06 Feb 2020 15:08:17 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/code-for-hash-md5-was-not-found/</guid>
      <description>僕のPCはbrewがopensslがアップデートするたびにこのエラーがでる。1年毎くらいに発生するので毎回発生するたびに原因と対処方法は忘れ</description>
    </item>
    
    <item>
      <title>herokuにデプロイ</title>
      <link>https://dream-yt.github.io/post/heroku-deploy-bia-git/</link>
      <pubDate>Mon, 27 Jan 2020 12:38:15 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/heroku-deploy-bia-git/</guid>
      <description>忘れるのでメモ $ brew install heroku $ heroku login # あらかじめherokuのUIでアカウントをつくっておいたアカウントでログイン $ cd ~/path/to/app # アプリをつくる $ heroku create rsshub-yahoo-jp-tv # 名</description>
    </item>
    
    <item>
      <title>browserifyからwebpackに移行するときのエラー</title>
      <link>https://dream-yt.github.io/post/browserify-webpack-amd-commonjs/</link>
      <pubDate>Thu, 23 Jan 2020 17:46:27 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/browserify-webpack-amd-commonjs/</guid>
      <description>browserifyのcommonjsと、webpackのcommonjsの違いにハマったときの話 経緯 browserifyからwebpack</description>
    </item>
    
    <item>
      <title>androidの仮想デバイス(AVD)にadb rootで接続する</title>
      <link>https://dream-yt.github.io/post/connect-avd-adb-as-root/</link>
      <pubDate>Fri, 17 Jan 2020 15:47:02 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/connect-avd-adb-as-root/</guid>
      <description>androidの /data/ 配下など、rootでしかアクセスできない領域のデータを確認する場合に、 adb root する必要がある 仮想デバイスの起動 # 一覧を取得 $ emulator</description>
    </item>
    
    <item>
      <title>git grepで探すファイルの拡張子を指定</title>
      <link>https://dream-yt.github.io/post/git-grep-target-file-extension/</link>
      <pubDate>Fri, 17 Jan 2020 11:35:48 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/git-grep-target-file-extension/</guid>
      <description>こんな感じでできる $ git grep cache -- &#39;*.java&#39; git grepでは -- 以降が対象パスの指定となっているので、そこにglobを書くと探索するファイルを指定できる &amp;ndash; …​</description>
    </item>
    
    <item>
      <title>terraformでroute53の管理</title>
      <link>https://dream-yt.github.io/post/terraform-route53/</link>
      <pubDate>Thu, 16 Jan 2020 09:17:45 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/terraform-route53/</guid>
      <description>前提 awsのコンソールから諸々設定をしたものを、terraformをつかってコード管理できるようにしていく場合の作業 前準備 まず最初に目当ての</description>
    </item>
    
    <item>
      <title>vscodeにペーストすると画像をgithubにあげてくれるvscode-extension-mardown-image-pasteが便利</title>
      <link>https://dream-yt.github.io/post/vscode-extension-mardown-image-paste/</link>
      <pubDate>Wed, 15 Jan 2020 14:48:04 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/vscode-extension-mardown-image-paste/</guid>
      <description>GitHubのコメント欄に画像を貼り付けられるのと同じ操作感でvscode上から画像をアップロードできる とても便利 njleonzhang/vscode-extension-mardown-image-paste: read the image from system clipborad, optimize the size, upload to CDN,</description>
    </item>
    
    <item>
      <title>.d.ts ファイルを自作してimportする</title>
      <link>https://dream-yt.github.io/post/my-project-d-ts-file/</link>
      <pubDate>Sun, 12 Jan 2020 12:35:03 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/my-project-d-ts-file/</guid>
      <description>APIのTypeScriptの型定義ファイル(foobar.d.tsなど)が提供されておらず、APIレスポンスをjson2tsなどにつっこん</description>
    </item>
    
    <item>
      <title>package.json の deps を深く考えずに全部upgradeする</title>
      <link>https://dream-yt.github.io/post/use-npm-check-updates/</link>
      <pubDate>Sat, 11 Jan 2020 16:34:44 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/use-npm-check-updates/</guid>
      <description>以下のコマンドでできる $ npx npm-check-updates --upgrade いちおうどんなアップグレードになるかは事前に確認できる $ npx npm-check-updates その他のオプションもいろいろある $ npx npm-check-updates --help npx: 259個</description>
    </item>
    
    <item>
      <title>macosでディスクがいっぱいになったとき、大きくて使わないファイルを探す</title>
      <link>https://dream-yt.github.io/post/macos-find-bigfile/</link>
      <pubDate>Wed, 08 Jan 2020 12:34:39 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/macos-find-bigfile/</guid>
      <description>duを使ったりしても良いが、macosの標準でついているUIから大きくて不要なファイルを探すのが簡単 macの左上の🍎マーク このマックのついて</description>
    </item>
    
    <item>
      <title>HLSとm3u8ファイルとMaster Playlistについて</title>
      <link>https://dream-yt.github.io/post/hls-m3u8-masterplaylist/</link>
      <pubDate>Mon, 06 Jan 2020 12:33:01 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/hls-m3u8-masterplaylist/</guid>
      <description>こちらの記事の焼き直し m3u8とhls · sacre m3u8ファイルとは こちらがわかりやすかった 動画配信技術 その1 - HTTP Live Streaming(HLS) - Akamai Japan Blog HLSを行うためのヘ</description>
    </item>
    
    <item>
      <title>Fluentd→Bigquery タグごとに別テーブルにinsert</title>
      <link>https://dream-yt.github.io/post/fluentd-bigquery-101/</link>
      <pubDate>Sat, 28 Dec 2019 11:12:24 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/fluentd-bigquery-101/</guid>
      <description>こんな設定でできる &amp;lt;source&amp;gt; @type forward &amp;lt;/source&amp;gt; &amp;lt;match bigquery.**&amp;gt; @type bigquery_insert &amp;lt;buffer tag&amp;gt; flush_interval 10 &amp;lt;/buffer&amp;gt; &amp;lt;inject&amp;gt; time_key time utc true &amp;lt;/inject&amp;gt; auth_method json_key json_key /home/jibun/fluentd/xxxxxx-123456-35640a504591.json project myprj-135512 dataset ${tag[1]} table ${tag[2]} &amp;lt;/match&amp;gt; プレースホルダー この部分の設定で、タグごとに別テーブルへとin</description>
    </item>
    
    <item>
      <title>Start Gcp Free Instance</title>
      <link>https://dream-yt.github.io/post/start-gcp-free-instance/</link>
      <pubDate>Wed, 25 Dec 2019 00:13:24 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/start-gcp-free-instance/</guid>
      <description>gcpで無料のインスタンスを立ち上げてsshするまで gcpアカウントのセットアップ $ gcloud config set project penguin-xxxxxxxxxx $ gcloud config set account penguin@gmail.com $ gcloud auth login ブラウザが立ち上がるのでロ</description>
    </item>
    
    <item>
      <title>m3u8とhls</title>
      <link>https://dream-yt.github.io/post/m3u8andhls/</link>
      <pubDate>Tue, 24 Dec 2019 19:08:10 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/m3u8andhls/</guid>
      <description>m3u8とhls は両方とも動画ファイルの配信で使う仕様/ファイルフォーマットの名前 m3u8 とは 動画ファイルが分割されてアップロードされている場合に</description>
    </item>
    
    <item>
      <title>自宅のLANの設定で毎回調べることメモ</title>
      <link>https://dream-yt.github.io/post/home-lan-memo/</link>
      <pubDate>Wed, 11 Dec 2019 11:55:06 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/home-lan-memo/</guid>
      <description>PPPoE とは インターネット用語1分解説～PPPoEとは～ - JPNIC まずPPPとは PPPの機能の中には、 ユーザーの認証やIPアドレスの割り当て等が含まれま</description>
    </item>
    
    <item>
      <title>SQLで5分ごとの平均を出す</title>
      <link>https://dream-yt.github.io/post/sql-groupby-5minute-window/</link>
      <pubDate>Sat, 07 Dec 2019 22:26:58 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/sql-groupby-5minute-window/</guid>
      <description>こんな2カラムがあるテーブルで5分ごとのdurationの平均とかMAXとかをサマりたい duration doubleが入っている レスポンスを返すまでにかか</description>
    </item>
    
    <item>
      <title>nodejsで Google Cloud Storage にファイルをアップロードしてCDNで配信する</title>
      <link>https://dream-yt.github.io/post/gcs-upload-static-public-file/</link>
      <pubDate>Wed, 04 Dec 2019 14:47:44 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/gcs-upload-static-public-file/</guid>
      <description>こんな場合のスニペット データをJSON形式でアップロードしたい 静的ファイルをアップロードしてCDNがわりに使うようなヘッダを付与したい gcs</description>
    </item>
    
    <item>
      <title>Python Simple S3client</title>
      <link>https://dream-yt.github.io/post/python-simple-s3client/</link>
      <pubDate>Sun, 01 Dec 2019 22:13:23 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/python-simple-s3client/</guid>
      <description></description>
    </item>
    
    <item>
      <title>StackDriverLoggingのログへのクエリ入門</title>
      <link>https://dream-yt.github.io/post/stack-driver-log-query-101/</link>
      <pubDate>Tue, 26 Nov 2019 18:46:57 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/stack-driver-log-query-101/</guid>
      <description>クエリ内の文字列にはダブルクオートを使う必要がある (シングルクオートはダメそう) ログがjson形式の場合は jsonPayload.requestUrl とかでペイロードを使ったクエリも</description>
    </item>
    
    <item>
      <title>jqで変形 (オブジェクト =&gt; 配列 =&gt; オブジェクト)</title>
      <link>https://dream-yt.github.io/post/jq-object-array-object/</link>
      <pubDate>Sun, 24 Nov 2019 09:18:24 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/jq-object-array-object/</guid>
      <description>こんなデータ構造のjsonがあるとして { &amp;#34;APP1&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;旧App&amp;#34;, &amp;#34;monId&amp;#34;: 277013 }, &amp;#34;APP2&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;App&amp;#34;, &amp;#34;monId&amp;#34;: 241736 }, &amp;#34;DB&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;Database&amp;#34;, &amp;#34;monId&amp;#34;: 234737 }, &amp;#34;S&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;Static&amp;#34;, &amp;#34;monId&amp;#34;: 221738 } } この形式にjq</description>
    </item>
    
    <item>
      <title>[読書メモ] インターフェイスデザインのお約束</title>
      <link>https://dream-yt.github.io/post/ui-101-principles/</link>
      <pubDate>Mon, 18 Nov 2019 15:09:20 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/ui-101-principles/</guid>
      <description>O&amp;rsquo;Reilly Japan - インタフェースデザインのお約束 2章 文字と言葉 010 log-in より sign-in log-in ではなく sign-in を使った方がよい ただし、日本語では「ログイン」のほうが一般的なのでそ</description>
    </item>
    
    <item>
      <title>axiosでステータスコード404のときに例外をあげなくする</title>
      <link>https://dream-yt.github.io/post/axios-allows-404-statuscode/</link>
      <pubDate>Sun, 17 Nov 2019 12:54:35 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/axios-allows-404-statuscode/</guid>
      <description>axiosはレスポンスのステータスが500でも404でも例外を投げてしまう Don&amp;rsquo;t throw error / catch on 400-level responses · Issue #41 · axios/axios それで困る時、たとえば4xx系は許容した</description>
    </item>
    
    <item>
      <title>UTF-8じゃないサイトをaxiosで取得する</title>
      <link>https://dream-yt.github.io/post/axios-non-utf8-website/</link>
      <pubDate>Sun, 17 Nov 2019 12:34:41 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/axios-non-utf8-website/</guid>
      <description>axiosはデフォルトでサイトの文字コードをUTF-8決め打ちでデコードしてしまう なのでUTF-8じゃないサイトを取得すると文字化けする how to</description>
    </item>
    
    <item>
      <title>一定期間で自分がGitHubでマージしたブランチを取得する</title>
      <link>https://dream-yt.github.io/post/gitlog-mymerge/</link>
      <pubDate>Wed, 13 Nov 2019 12:33:01 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/gitlog-mymerge/</guid>
      <description>こんな感じ $ git log \ --format=&amp;#39;%h %an (%ai) %s&amp;#39; --since=&amp;#39;2019-10-25&amp;#39; \ --author=sakamossan \ --grep=&amp;#39;Merge pull request #\d+&amp;#39; -P こんな出力が得られる 3fc6ed727 sakamossan (2019-11-11 14:04:54 +0900) Merge pull request #4573 ... 87daf1614 sakamossan (2019-11-06 17:59:30 +0900) Merge pull request #4557 ... 47e68edfc sakamossan (2019-11-06 11:22:41 +0900) Merge pull request #4542 ... &amp;ndash;format=&amp;rsquo;%h %an (%ai) %s&amp;rsquo; 出力フォ</description>
    </item>
    
    <item>
      <title>firestoreからbigqueryへのexport手順</title>
      <link>https://dream-yt.github.io/post/bigquery-to-firestore/</link>
      <pubDate>Tue, 12 Nov 2019 18:56:11 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/bigquery-to-firestore/</guid>
      <description>gcsを介して行う export from firestore gcloud beta firestore export \ gs://[BUCKET_NAME] \ --collection-ids=[COLLECTION_ID_1],[COLLECTION_ID_2] データのエクスポートとインポート | Firebase import to bigquery bq --location=[LOCATION] load \ --source_format=[FORMAT] \ [DATASET].[TABLE] \ [PATH_TO_SOURCE] Loading data from Cloud Firestore exports | BigQuery | Google Cloud</description>
    </item>
    
    <item>
      <title>firebaseでスケジュール(cron)実行</title>
      <link>https://dream-yt.github.io/post/firebase-cloudfunctions-cron/</link>
      <pubDate>Sat, 09 Nov 2019 17:14:52 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/firebase-cloudfunctions-cron/</guid>
      <description>まず、事前にfirebaseのコンソール画面で リソースロケーション を選ぶ必要がある コンソール Project Overview の隣の ⚙ マーク Google Cloud Platform（GCP）</description>
    </item>
    
    <item>
      <title>circleciのcronトリガーでfirebase/hostingをアップデートする</title>
      <link>https://dream-yt.github.io/post/firebase-circleci-cron-deploy/</link>
      <pubDate>Mon, 04 Nov 2019 14:26:47 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/firebase-circleci-cron-deploy/</guid>
      <description>こんな前提の場合の設定 静的サイトをfirebase/hostingに置いている circleciのjob上 (dockerコンテナ内) でサイトの</description>
    </item>
    
    <item>
      <title>IAM権限を絞ったuserでserverlessを使う</title>
      <link>https://dream-yt.github.io/post/awscli-create-user-and-policy/</link>
      <pubDate>Sat, 02 Nov 2019 15:10:56 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/awscli-create-user-and-policy/</guid>
      <description>Serverless framework は sls deploy コマンドを叩くAWSユーザには admin アクセスを推奨している Attach existing policies directly. Search for and select AdministratorAccess then click Next: Review. Check to make sure everything looks good and click Create user. Serverless Framework - AWS Lambda Guide - Credentials しかし、SI</description>
    </item>
    
    <item>
      <title>TypeScript の Type Guard を使う</title>
      <link>https://dream-yt.github.io/post/ts-type-guard/</link>
      <pubDate>Fri, 01 Nov 2019 08:03:40 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/ts-type-guard/</guid>
      <description>typescriptでは型をチェックするような分岐を書くことができる その分岐の中だと「この変数はこの型」というのをコンパイラ/エディタが認識</description>
    </item>
    
    <item>
      <title>ngrokを使いはじめる</title>
      <link>https://dream-yt.github.io/post/start-ngrok/</link>
      <pubDate>Wed, 30 Oct 2019 12:02:06 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/start-ngrok/</guid>
      <description>サインアップ アカウントをつくる必要がある (GitHubアカウントでサインアップできる) ngrok - secure introspectable tunnels to localhost インストール/認証 サインアップするとng</description>
    </item>
    
    <item>
      <title>ffmpegコマンドの最小限の基本</title>
      <link>https://dream-yt.github.io/post/ffmpeg-101/</link>
      <pubDate>Wed, 23 Oct 2019 17:45:08 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/ffmpeg-101/</guid>
      <description>基本はこの順番 ffmpeg -i {{ 入力ファイル }} {{ フィルタ }} {{ 出力ファイル }} フィルタとは 動画、音声、または両方を加工するためのもの たとえばぼやかしたり、前</description>
    </item>
    
    <item>
      <title>watchで出力が変化したら通知が欲しい</title>
      <link>https://dream-yt.github.io/post/bash-watch-or-notify/</link>
      <pubDate>Wed, 23 Oct 2019 15:25:01 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/bash-watch-or-notify/</guid>
      <description>watchコマンドにはエラー時にビープするオプションはあるが、コマンドが正常終了した場合にビープして気がつく手段がないのでそれをなんとかする</description>
    </item>
    
    <item>
      <title>reactでhtml内にjsonを埋め込む</title>
      <link>https://dream-yt.github.io/post/react-embedd-json-innerhtml/</link>
      <pubDate>Tue, 22 Oct 2019 20:53:11 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/react-embedd-json-innerhtml/</guid>
      <description>reactのVDOMにJSONを埋め込もうとすると、htmlサニタイズされてしまう サニタイズされた文字列を読み込むのは面倒 サニタイズされない</description>
    </item>
    
    <item>
      <title>npmパッケージング関連コマンド</title>
      <link>https://dream-yt.github.io/post/npm-publish-101/</link>
      <pubDate>Sun, 20 Oct 2019 16:49:23 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/npm-publish-101/</guid>
      <description>CLI documentation | npm Documentation npm init package.json を一般的な方式で初期化してくれる npm-init | npm Documentation npm set author 情報の更新/設定 $ npm set init.author.url https://twitter.com/sakamoto_akira_ $ npm set init.author.email mild7caloriemategreentea@gmail.com $ npm set init.author.name sakamoto_akira_ $ npm adduser npm version package.json の version を上げてくれる $</description>
    </item>
    
    <item>
      <title>nodejsのコードからtypescriptをrequireする</title>
      <link>https://dream-yt.github.io/post/ts-node-register-to-call-from-nodejs/</link>
      <pubDate>Mon, 14 Oct 2019 14:01:42 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/ts-node-register-to-call-from-nodejs/</guid>
      <description>ts-node/register を使うとできる たとえば scripts/make-index.js というスクリプトから src/bigquery/index.ts 内のクラスをrequireする こんなコードを書くとrequireできる #!/usr/bin/env node require(&amp;#34;source-map-support&amp;#34;).install() require(&amp;#34;ts-node&amp;#34;).register() const { Indexer } = require(&amp;#34;../src/bigquery&amp;#34;) Indexer.run()</description>
    </item>
    
    <item>
      <title>@types/nodeを使う</title>
      <link>https://dream-yt.github.io/post/use-at-types-node/</link>
      <pubDate>Sat, 12 Oct 2019 13:05:11 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/use-at-types-node/</guid>
      <description>@types/nodeをいれておくと fsなどnodeのデフォルトのモジュールで型の補完がきくようになる DefinitelyTyped/types/node at master · DefinitelyTyped/DefinitelyTyped @types/node のバージョンは node のバージョ</description>
    </item>
    
    <item>
      <title>動画のラウドネスについて</title>
      <link>https://dream-yt.github.io/post/lufs-loudness-101/</link>
      <pubDate>Tue, 08 Oct 2019 13:08:30 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/lufs-loudness-101/</guid>
      <description>動画のエンコードをする場合の用語の整理 映像系の人が出してくる仕様で知らない用語があったのでメモ 参考にしたもの このドキュメントが(比較的)平易</description>
    </item>
    
    <item>
      <title> .athenaclirc の使い方</title>
      <link>https://dream-yt.github.io/post/athenacli-rcfile/</link>
      <pubDate>Thu, 03 Oct 2019 07:38:18 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/athenacli-rcfile/</guid>
      <description>athenacli というCLIからathenaにクエリできるツールがある これのathenaclircファイルの記法がドキュメントになかったのでメモ 結論 こんな</description>
    </item>
    
    <item>
      <title>SSLエラー(dh key too small)が発生した時の調査/と対応</title>
      <link>https://dream-yt.github.io/post/ssl-error-handling/</link>
      <pubDate>Wed, 02 Oct 2019 14:04:08 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/ssl-error-handling/</guid>
      <description>たとえばこんなエラーが出た時 content:Cannot create SSL connection: SSL connect attempt failed error:141A318A:SSL routines:tls_process_ske_dhe:dh key too small 見たところ先方が使っている DH鍵 が短くてconnectionが取れないということのよう</description>
    </item>
    
    <item>
      <title>jq で parseInt</title>
      <link>https://dream-yt.github.io/post/jq-parseint/</link>
      <pubDate>Sat, 28 Sep 2019 12:26:35 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/jq-parseint/</guid>
      <description>jqで文字列から数値に変換したいときは tonumber 関数を使う 例 こんな感じで使える select 関数で条件に合うものだけにフィルタ IDが文字列で 5 から始まるもの 数値</description>
    </item>
    
    <item>
      <title>jqで改行区切りなど連続したjsonを配列にする</title>
      <link>https://dream-yt.github.io/post/jq-list-json-into-array/</link>
      <pubDate>Wed, 18 Sep 2019 22:47:34 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/jq-list-json-into-array/</guid>
      <description>jq でselectとかで色々やったあと配列に戻したいときがある jq -s をパイプすると改行区切りのjsonを1つの配列にしてくれる cat ./src/resources/test/ranking-latest.json \ | jq &amp;#39;.[] | select(.shopId |</description>
    </item>
    
    <item>
      <title>vscodeのMarkdownPreviewにカスタムCSSをあてる</title>
      <link>https://dream-yt.github.io/post/vscode-markdown-preview-css/</link>
      <pubDate>Wed, 18 Sep 2019 16:25:00 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/vscode-markdown-preview-css/</guid>
      <description>vscodeのマークダウンプレビューは便利だけど、スタイリングをちょっと修正したかったので やりかたをググったら以下の記事が出てきた Visual Studio Code の CSS</description>
    </item>
    
    <item>
      <title>macosでデフォルトで開くアプリをコマンドライン(duti)で変更する</title>
      <link>https://dream-yt.github.io/post/macos-duti/</link>
      <pubDate>Thu, 12 Sep 2019 12:29:58 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/macos-duti/</guid>
      <description>macosでは各拡張子ごとにデフォルトで開くアプリが決まっている Finderから変更はできるが、扱う拡張子はけっこうたくさんあるのでいちいち</description>
    </item>
    
    <item>
      <title>serverless-kms-secrets を導入する手順2</title>
      <link>https://dream-yt.github.io/post/serverless-kms-secrets-102/</link>
      <pubDate>Sat, 07 Sep 2019 18:28:17 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/serverless-kms-secrets-102/</guid>
      <description>こちらの使い方 nordcloud/serverless-kms-secrets: 🔑🔐☁️ Serverless plugin to encrypt variables with KMS インストール $ npm install --save-dev serverless-kms-secrets CMKを生成 kmsでCMK(マスターキーのようなもの)を作成 ポリシーの設定など細</description>
    </item>
    
    <item>
      <title>webpackで、プロジェクトのファイルを@ディレクトリ配下でimportできるような設定</title>
      <link>https://dream-yt.github.io/post/import-withmark-in-typescript-vscode-jest/</link>
      <pubDate>Sun, 25 Aug 2019 15:44:56 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/import-withmark-in-typescript-vscode-jest/</guid>
      <description>webpackだとsymlink貼ったり NODE_PATH をいじったりする必要はない 差分 webpack.config.js を変更しないとビルドできない resolve: { + alias: { &amp;#39;@&amp;#39;: path.resolve(__dirname, &amp;#39;./src/&amp;#39;) }, extensions: [&amp;#39;.ts&amp;#39;, &amp;#39;.tsx&amp;#39;, &amp;#39;.js&amp;#39;] }, 正常にビル</description>
    </item>
    
    <item>
      <title>webpackで、プロジェクトのファイルを@ディレクトリ配下でimportできるような設定</title>
      <link>https://dream-yt.github.io/post/import-withat-mark-in-typescript-vscode-jest/</link>
      <pubDate>Sun, 25 Aug 2019 15:44:56 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/import-withat-mark-in-typescript-vscode-jest/</guid>
      <description>webpackだとsymlink貼ったり NODE_PATH をいじったりする必要はない 差分 webpack.config.js を変更しないとビルドできない resolve: { + alias: { &amp;#39;@&amp;#39;: path.resolve(__dirname, &amp;#39;./src/&amp;#39;) }, extensions: [&amp;#39;.ts&amp;#39;, &amp;#39;.tsx&amp;#39;, &amp;#39;.js&amp;#39;] }, 正常にビル</description>
    </item>
    
    <item>
      <title>serverless-webpack のプロジェクトで serverless-offline 実行時に NODE_ENV を設定する</title>
      <link>https://dream-yt.github.io/post/serverless-webpack-offline-node_env/</link>
      <pubDate>Sun, 25 Aug 2019 15:06:15 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/serverless-webpack-offline-node_env/</guid>
      <description>地味だがハマった。ちょうどおんなじことをしていた人の解決策が見つかって助かった MNML ↑の方法でうまくいった つまり原因は こういうことらしい webpack はNO</description>
    </item>
    
    <item>
      <title>athena(presto)で、dateとtimeからJSTを得る</title>
      <link>https://dream-yt.github.io/post/cloudfront-access-log-jst-datetime/</link>
      <pubDate>Sat, 24 Aug 2019 16:00:57 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/cloudfront-access-log-jst-datetime/</guid>
      <description>CloudFrontのログファイルをathenaでテーブルにすると、dateカラムとtimeカラムで別カラムになっている Amazon CloudFront ログのクエリ - Amazon</description>
    </item>
    
    <item>
      <title>AWS Key Management Service (KMS) 入門</title>
      <link>https://dream-yt.github.io/post/aws-kms-101/</link>
      <pubDate>Sat, 17 Aug 2019 16:43:19 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/aws-kms-101/</guid>
      <description>AWS Key Management Service とは - AWS Key Management Service AWS Key Management Service (AWS KMS) は、データの暗号化に使用される暗号化キーの作成と管理を容易にするマネージド型サービスです。お客様が AWS KMS で作</description>
    </item>
    
    <item>
      <title>bigqueryのクエリ結果をgcsに出力するスクリプト</title>
      <link>https://dream-yt.github.io/post/bigquery-export-gcs-script-py/</link>
      <pubDate>Sat, 10 Aug 2019 16:24:49 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/bigquery-export-gcs-script-py/</guid>
      <description>こんな段取りで行う テンポラリなテーブルを作って、そこにクエリの結果を入れる そのテンポラリなテーブルを、データエクスポート機能を使ってgcsに</description>
    </item>
    
    <item>
      <title>プロジェクトの.bigqueryrcの設定</title>
      <link>https://dream-yt.github.io/post/bq-bigqueryrc-in-project/</link>
      <pubDate>Thu, 08 Aug 2019 12:14:56 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/bq-bigqueryrc-in-project/</guid>
      <description>bqコマンド、--maximum_bytes_billed とか、デフォルトで設定しておきたいオプションはある .bigqueryrc というファイルを使うとbqコマ</description>
    </item>
    
    <item>
      <title>serverless deploy を amazonlinuxイメージで行う</title>
      <link>https://dream-yt.github.io/post/serverless-deploy-from-docker-container/</link>
      <pubDate>Mon, 05 Aug 2019 11:32:41 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/serverless-deploy-from-docker-container/</guid>
      <description>lambdaとnodeのネイティブモジュール周りで辛いことになった時用 Dockerfile FROMamazonlinux:latestRUN curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo &amp;gt; /etc/yum.repos.d/yarn.repoRUN curl --silent --location https://rpm.nodesource.com/setup_10.x | bashRUN yum install -y nodejs gcc-c++ make git yarnRUN yarn global add serverless --silent --no-progressRUN mkdir /appWORKDIR/appADD package.json /app/package.jsonADD yarn.lock /app/yarn.lock# b</description>
    </item>
    
    <item>
      <title>nodejs/typescriptでSNSイベントからgetMetricWidgetImage(画像)を取得する</title>
      <link>https://dream-yt.github.io/post/node-getmetricwidgetimagewithsnsevent/</link>
      <pubDate>Sun, 04 Aug 2019 13:25:09 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/node-getmetricwidgetimagewithsnsevent/</guid>
      <description>こんな感じのコードでできた MetricWidget の型定義はaws-sdkにはなかった ドキュメントにはなっていた GetMetricWidgetImage: Metric Widget Structure and Syntax - Amazon CloudWatch SNSEvent の型定義は↓ DefinitelyTyped/index.d.ts at master · DefinitelyTyped/DefinitelyTyped import { SNSEvent }</description>
    </item>
    
    <item>
      <title>TypescriptでLambdaのハンドラーを書いてbashでアップロードする</title>
      <link>https://dream-yt.github.io/post/typescript-lambda-shellscript/</link>
      <pubDate>Sun, 04 Aug 2019 13:16:56 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/typescript-lambda-shellscript/</guid>
      <description>普通だとlambdaのアップロードはserverlessなどフレームワークを使うが、package.jsonを別に作りたくない場合があり、デ</description>
    </item>
    
    <item>
      <title>perlのstrict/utf8フラグについて</title>
      <link>https://dream-yt.github.io/post/perl-use-strict-utf8-flag/</link>
      <pubDate>Tue, 30 Jul 2019 14:42:22 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/perl-use-strict-utf8-flag/</guid>
      <description>なんとなく知識では知っていたけど試したことがなかったのでメモ perlにはstrictフラグというものがあって、 構文エラーにならないけど変な式</description>
    </item>
    
    <item>
      <title>AWS、LambdaまわりのIAM入門</title>
      <link>https://dream-yt.github.io/post/aws-iam-101/</link>
      <pubDate>Sun, 28 Jul 2019 09:54:35 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/aws-iam-101/</guid>
      <description>lambda を使っていて、権限周りが分からなかったのでメモ 用語 IAM IAMロール ポリシー IAMポリシー リソースポリシー IAM 権限周りを管理しているエンティティ</description>
    </item>
    
    <item>
      <title>rsyncでディレクトリをコピーする</title>
      <link>https://dream-yt.github.io/post/rsync-clone-directory/</link>
      <pubDate>Fri, 26 Jul 2019 09:34:34 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/rsync-clone-directory/</guid>
      <description>送信元ディレクトリと送信先ディレクトリを同じ状態にしたいときは下記のような指定をする $ rsync \ -e &amp;#34;ssh -i ~/.ssh/id_rsa&amp;#34; \ -ahv --compress --delete ./webui/public/ admin@test.jp:/www/data/ ssh鍵が指定が必要な場合は-</description>
    </item>
    
    <item>
      <title>firebase上でtypescriptで書かれたnextjsを動かす</title>
      <link>https://dream-yt.github.io/post/firebase-next-typescript/</link>
      <pubDate>Thu, 18 Jul 2019 09:21:04 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/firebase-next-typescript/</guid>
      <description>こちらのexampleを動かしながらデプロイまでの流れをみる next.js/examples/with-firebase-hosting at master · zeit/next.js できればtypescriptで開発したいので、それでどのへんをいじれば</description>
    </item>
    
    <item>
      <title>GCPのCloud Build入門</title>
      <link>https://dream-yt.github.io/post/gcp-cloudbuild-101/</link>
      <pubDate>Wed, 17 Jul 2019 15:47:50 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/gcp-cloudbuild-101/</guid>
      <description>circleciではシェルのコマンドを組み合わせてビルドを実施するが、 GCPのcloudbuildはdockerイメージを使ってビルドを実施</description>
    </item>
    
    <item>
      <title>bashでファイルの拡張子を一括変更する</title>
      <link>https://dream-yt.github.io/post/change-file-extention-with-bash/</link>
      <pubDate>Tue, 16 Jul 2019 11:23:13 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/change-file-extention-with-bash/</guid>
      <description>たとえばsrc配下のjsファイルをぜんぶtsファイルに変更したい場合は以下のように書ける $ find ./src -name &amp;#39;*.js&amp;#39; -type f \ | perl -wnlE &amp;#39;/(\S+).js/ and say &amp;#34;$1.js $1.ts&amp;#34;&amp;#39; \ | xargs -n2 mv 動作 find ./src -name</description>
    </item>
    
    <item>
      <title>package.jsonの古いファイルをいっぺんに更新する</title>
      <link>https://dream-yt.github.io/post/update-npm-outdated/</link>
      <pubDate>Mon, 15 Jul 2019 18:50:46 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/update-npm-outdated/</guid>
      <description>古いパッケージの一覧 $ npm outdated こんな感じの出力が得られる $ npm outdated Package Current Wanted Latest Location firebase-functions 2.3.1 2.3.1 3.1.0 project_name firebase-tools 6.12.0 6.12.0 7.1.0 project_name いっぺんに更新する 以下のようなワンライナーで全部最新</description>
    </item>
    
    <item>
      <title>SameSite Cookie とは</title>
      <link>https://dream-yt.github.io/post/samesite-cookie/</link>
      <pubDate>Thu, 11 Jul 2019 12:25:34 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/samesite-cookie/</guid>
      <description>こういう機能 今開いているページのドメインから、別のドメインにリクエストを送る際に、 クッキーを送るかどうかを設定できる機能 別のドメインにリクエ</description>
    </item>
    
    <item>
      <title>SSL越しにローカルの静的ファイルを閲覧したい (開発用)</title>
      <link>https://dream-yt.github.io/post/devserver-ssl-static/</link>
      <pubDate>Wed, 10 Jul 2019 18:26:22 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/devserver-ssl-static/</guid>
      <description>SSLさせてくれるhttpサーバのコード こちらから拝借 simple-https-server.py import http.server import ssl server_address = (&amp;#39;127.0.0.1&amp;#39;, 443) httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler) httpd.socket = ssl.wrap_socket(httpd.socket, server_side=True, certfile=&amp;#34;server.pem&amp;#34;, keyfile=&amp;#34;key.pem&amp;#34;, ssl_version=ssl.PROTOCOL_TLS) httpd.serve_forever() 証明書を作ってserver start $ mkdir /tmp/$(pwgen) &amp;amp;&amp;amp; cd $_ $ pbpaste</description>
    </item>
    
    <item>
      <title>dockerイメージの、レイヤーとサイズの関係をみる</title>
      <link>https://dream-yt.github.io/post/docker-image-history/</link>
      <pubDate>Fri, 05 Jul 2019 12:52:40 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/docker-image-history/</guid>
      <description>docker history を使うとみられる 例 $ docker history --no-trunc --format=&amp;quot;{{.Size}}\t{{.CreatedBy}}&amp;quot; perl:5.20.0 0B /bin/sh -c #(nop) CMD [perl5.20.0 -de0] 0B /bin/sh -c #(nop) WORKDIR /root 6.55MB /bin/sh -c curl -LO https://raw.githubusercontent.com/miyagawa/cpanminus/master/cpanm &amp;amp;&amp;amp; chmod +x cpanm &amp;amp;&amp;amp; ./cpanm App::cpanminus &amp;amp;&amp;amp; rm ./cpanm 0B /bin/sh -c #(nop) WORKDIR /usr/src 55MB /bin/sh -c ./Configure -Duse64bitall -des &amp;amp;&amp;amp; make -j$(nproc) &amp;amp;&amp;amp; TEST_JOBS=$(nproc) make test_harness &amp;amp;&amp;amp; make install &amp;amp;&amp;amp; make</description>
    </item>
    
    <item>
      <title>jq変形 {配列 =&gt; IDをキーとするオブジェクト}</title>
      <link>https://dream-yt.github.io/post/jq-object-add/</link>
      <pubDate>Wed, 03 Jul 2019 15:30:19 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/jq-object-add/</guid>
      <description>こんな配列を [ {&amp;#34;id&amp;#34;: &amp;#34;123&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;abc&amp;#34;}, {&amp;#34;id&amp;#34;: &amp;#34;456&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;qwe&amp;#34;} ] こうしたい { &amp;#34;123&amp;#34;: {&amp;#34;id&amp;#34;: &amp;#34;123&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;abc&amp;#34;}, &amp;#34;456&amp;#34;: {&amp;#34;id&amp;#34;: &amp;#34;456&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;qwe&amp;#34;} } add を使うとできる $ pbpaste | jq &#39;{ (.id): . } | [ . ] | add&#39; { &amp;quot;123&amp;quot;: { &amp;quot;id&amp;quot;: &amp;quot;123&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;abc&amp;quot; }, &amp;quot;456&amp;quot;: { &amp;quot;id&amp;quot;: &amp;quot;456&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;qwe&amp;quot; }</description>
    </item>
    
    <item>
      <title>React の Synthetic Event</title>
      <link>https://dream-yt.github.io/post/react-synthetic-event/</link>
      <pubDate>Mon, 01 Jul 2019 09:34:06 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/react-synthetic-event/</guid>
      <description>Reactに標準でついてくるEventオブジェクト Syntheticは合成という意味 ブラウザごとの差異を吸収してくれている SyntheticEvent – React event pooling なお、R</description>
    </item>
    
    <item>
      <title>typescriptでのnullチェック</title>
      <link>https://dream-yt.github.io/post/typescript-null-check-operator/</link>
      <pubDate>Sun, 30 Jun 2019 13:59:54 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/typescript-null-check-operator/</guid>
      <description>基本的にはイコール2つの演算子でチェックすれば undefinedとnullのどちらかであればtrueになる == null 例 $ ts-node &amp;gt; const v = {a: 1, c: null} undefined イコー</description>
    </item>
    
    <item>
      <title>ads.txt入門</title>
      <link>https://dream-yt.github.io/post/ads-txt-101/</link>
      <pubDate>Thu, 27 Jun 2019 17:17:06 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/ads-txt-101/</guid>
      <description>ads.txtという仕様がIABから出されている ads.txt - Authorized Digital Sellers - IAB Tech Lab 概要 ads.txtはメディアのドメイン配下に置かれるtxtファイル 枠を買い</description>
    </item>
    
    <item>
      <title>BigQueryで UNNEST のやりかた</title>
      <link>https://dream-yt.github.io/post/bigquery-unnest/</link>
      <pubDate>Wed, 26 Jun 2019 17:40:01 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/bigquery-unnest/</guid>
      <description>UNNEST は配列をフラットなレコードに直すための関数 こんなログデーブルがあったとして、post_arrayの配列をほぐしてフラットなレコードにしたい</description>
    </item>
    
    <item>
      <title>node-canvasをlambdaで動かす</title>
      <link>https://dream-yt.github.io/post/canvas-node-on-lambda/</link>
      <pubDate>Sat, 22 Jun 2019 13:00:03 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/canvas-node-on-lambda/</guid>
      <description>node-canvasは内部でネイティブモジュールを使用しているため、macos上でコンパイルしたものをlambdaにアップロードしても動作</description>
    </item>
    
    <item>
      <title>recodeコマンドでファイルの文字/改行コードを変更する</title>
      <link>https://dream-yt.github.io/post/recode-file-charactor-encoding/</link>
      <pubDate>Wed, 19 Jun 2019 17:09:44 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/recode-file-charactor-encoding/</guid>
      <description>文字コードの変換をするときはiconvを使うことが多かったが、recodeコマンドのほうが便利なことが多い 既存ファイルに置き換え(inpla</description>
    </item>
    
    <item>
      <title>redux-form (handleSubmit) 入門</title>
      <link>https://dream-yt.github.io/post/redux-form-101-handlesubmit/</link>
      <pubDate>Sun, 16 Jun 2019 10:23:17 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/redux-form-101-handlesubmit/</guid>
      <description>redux-form (handleSubmit) 入門 MyFormコンポーネントを定義 自前で実装するフォーム const MyForm = ({ handleSubmit }) =&amp;gt; ( &amp;lt;form onSubmit={handleSubmit}&amp;gt; &amp;lt;div&amp;gt; &amp;lt;label htmlFor=&amp;#34;firstName&amp;#34;&amp;gt;First Name&amp;lt;/label&amp;gt; &amp;lt;Field component={renderTextField} name=&amp;#34;firstName&amp;#34; type=&amp;#34;text&amp;#34; /&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;button type=&amp;#34;submit&amp;#34;&amp;gt;Submit&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt; ); ({ handleSubmit }) =&amp;gt; ( reduxFormか</description>
    </item>
    
    <item>
      <title>redashで数値カラムからカンマを取り除く</title>
      <link>https://dream-yt.github.io/post/redash-no-comma-number-column/</link>
      <pubDate>Wed, 12 Jun 2019 16:15:50 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/redash-no-comma-number-column/</guid>
      <description>画面下部のEdit Visualization カンマを取り除きたいカラムの Number format を 0 に変更 参考 Table Query Result Adding Commas · Issue #2778 · getredash/redash</description>
    </item>
    
    <item>
      <title>AWSのアクセストークンが昨日どんなAPIコールを行なったか確認する</title>
      <link>https://dream-yt.github.io/post/aws-cloudtrail-per-access-key/</link>
      <pubDate>Mon, 10 Jun 2019 13:31:32 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/aws-cloudtrail-per-access-key/</guid>
      <description>cloudtrailのlookup-eventsで昨日の分をすべてとる $ aws cloudtrail lookup-events \ --lookup-attributes AttributeKey=AccessKeyId,AttributeValue=xxxxxxxx \ --start-time $(date -v -2d -u +&amp;#34;%Y-%m-%dT%H:%M:%SZ&amp;#34;) \ --end-time $(date -v -1d -u +&amp;#34;%Y-%m-%dT%H:%M:%SZ&amp;#34;) \ | tee /tmp/_ 取得できるデータ Ev</description>
    </item>
    
    <item>
      <title>直近1週間の日付をdate形式で取得する</title>
      <link>https://dream-yt.github.io/post/date-sequence-bash/</link>
      <pubDate>Mon, 03 Jun 2019 18:01:44 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/date-sequence-bash/</guid>
      <description>seqとdate(mac上で作業しているのでgnu-date)を使う $ seq -7 0 | xargs -I{} gdate -d+{}days +&amp;#39;%Y-%m-%d&amp;#39; 2019-05-27 2019-05-28 2019-05-29 2019-05-30 2019-05-31 2019-06-01 2019-06-02 2019-06-03 こんな感じで mycommand --date 2019-05-27 mycommand --date 2019-05-28 mycommand --date 2019-05-29 mycommand --date 2019-05-30</description>
    </item>
    
    <item>
      <title>vscodeのextensionをvsixファイルからインストールする</title>
      <link>https://dream-yt.github.io/post/vscode-extention-by-vsix/</link>
      <pubDate>Sun, 02 Jun 2019 16:42:13 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/vscode-extention-by-vsix/</guid>
      <description>コマンドラインからcodeコマンドでできる $ code --install-extension ./auto-collapse-explorer-0.0.2.vsix --install-extension オプションが必要 .vsix ファイルを引数にとる 再起動 vscodeの再起動が必要(コマンドパレット</description>
    </item>
    
    <item>
      <title>csvからsqliteのdbファイルを作成/操作</title>
      <link>https://dream-yt.github.io/post/csv2sqlite-with-csvsql/</link>
      <pubDate>Sat, 25 May 2019 13:44:24 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/csv2sqlite-with-csvsql/</guid>
      <description>例えばathenaのクエリ結果のcsvをさらにこねたいときなど sqliteファイルを生成 $ csvsql \ --db sqlite:////tmp/_.db \ --tables t \ --insert ~/Downloads/3a032f51-1111-411b-8e6a-d19b2beba27e.csv $ sqlite3 /tmp/_.db &amp;#39;.schema&amp;#39; 出力 markdown形</description>
    </item>
    
    <item>
      <title>csvsqlを使ってサクッとスプレッドシートからmysqlにデータを入れる</title>
      <link>https://dream-yt.github.io/post/spreadsheet-csvsql/</link>
      <pubDate>Wed, 22 May 2019 12:57:56 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/spreadsheet-csvsql/</guid>
      <description>スプレッドシートに入れたいデータを書いてcsv形式でダウンロード csvをcsvsqlをつかってDBに入れる csvsql csvsqlはcsvkitをイン</description>
    </item>
    
    <item>
      <title>入門監視の読書メモ</title>
      <link>https://dream-yt.github.io/post/monitoring-101-reading-notes/</link>
      <pubDate>Sun, 19 May 2019 15:19:54 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/monitoring-101-reading-notes/</guid>
      <description>後から見返したり、おぼえておきたいことをメモ OSのメトリクスだけを対象にしたアラートは意味が薄い メトリクスが悪くなってもサービスに影響を与え</description>
    </item>
    
    <item>
      <title>Cannot write file ... because it would overwrite input file.</title>
      <link>https://dream-yt.github.io/post/vscode-typescript-allowjs-error/</link>
      <pubDate>Sat, 18 May 2019 12:31:40 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/vscode-typescript-allowjs-error/</guid>
      <description>typescriptのプロジェクトで開発中VSCodeでエラーメッセージが出た Error &amp;ldquo;Cannot write file &amp;hellip; because it would overwrite input file.&amp;rdquo; ファイルがすでに存在しているので書き出せ</description>
    </item>
    
    <item>
      <title>raspberry-piに固定IPを設定する</title>
      <link>https://dream-yt.github.io/post/raspberry-pi-static-ip/</link>
      <pubDate>Mon, 06 May 2019 22:12:51 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/raspberry-pi-static-ip/</guid>
      <description>結論としてはこんなコマンドでとりあえず固定IPを払い出せる echo &amp;#39;interface eth0&amp;#39; | tee -a /etc/dhcpcd.conf echo &amp;#39;static ip_address=192.168.111.90/24&amp;#39; | tee -a /etc/dhcpcd.conf echo &amp;#39;static routers=192.168.111.1&amp;#39; | tee -a /etc/dhcpcd.conf echo &amp;#39;staitc domain_name_servers=192.168.111.1&amp;#39; | tee -a /etc/dhcpcd.conf 以下、それぞれの項目につい</description>
    </item>
    
    <item>
      <title>Raspberry-Piのヘッドレスセットアップsshまで</title>
      <link>https://dream-yt.github.io/post/raspbian-stretch-setup/</link>
      <pubDate>Mon, 06 May 2019 20:57:43 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/raspbian-stretch-setup/</guid>
      <description>OSのイメージをダウンロード こちらから (Raspbianはどの機種のraspberry-piでも動くのかな) Download Raspbian for Raspberry Pi SDカードを初期化 Disk Utility.app</description>
    </item>
    
    <item>
      <title>circleci上でjest-watch-typeaheadがロードできずエラーになる場合</title>
      <link>https://dream-yt.github.io/post/jest-watchplugins-circleci-error/</link>
      <pubDate>Sat, 27 Apr 2019 12:38:51 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/jest-watchplugins-circleci-error/</guid>
      <description>前提 以下の場合だと(たぶん) circleci上でテストをするとき問題になる create-react-app で作業している yarn reject 済み こんなエラー circleci上でこんな感じ</description>
    </item>
    
    <item>
      <title>Spreadsheetで日付を文字列フォーマットして表示する</title>
      <link>https://dream-yt.github.io/post/spreadsheet-date-format/</link>
      <pubDate>Fri, 26 Apr 2019 15:14:18 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/spreadsheet-date-format/</guid>
      <description>TEXT関数を使えばよい =TEXT(G11, &amp;#34;m月d日（ddd）&amp;#34;) こんな感じで表示される 4月22日（月） ↑ G11 に日付文字列が入っている場合の例</description>
    </item>
    
    <item>
      <title>perlのDBIx::Class::ResultSetでちょい手の込んだSELECTの例1</title>
      <link>https://dream-yt.github.io/post/dbix-class-resultset-search1/</link>
      <pubDate>Mon, 08 Apr 2019 18:43:30 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/dbix-class-resultset-search1/</guid>
      <description>searchメソッドはすごい色々できるので覚えきれない 特に第二引数のハッシュに渡せるものがすごい色々できる $tab1_resultset-&amp;gt;search( { # 1つ目の引数は検索条件 &amp;#39;tab1.id&amp;#39; =&amp;gt; $id,</description>
    </item>
    
    <item>
      <title>BigQuery の Scheduled Query を設定する方法</title>
      <link>https://dream-yt.github.io/post/bigquery-create-scheduled-query/</link>
      <pubDate>Sun, 07 Apr 2019 13:48:43 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/bigquery-create-scheduled-query/</guid>
      <description>bigqueryの古いUIからの作成手順 クエリを実行 実行結果画面から Schedule Query のボタンから設定 旧UIのURLは https://bigquery.cloud.google.com/{{ project_id }} (新UIからリンクがなくなって</description>
    </item>
    
    <item>
      <title>homebrewで過去のversionをインストールする</title>
      <link>https://dream-yt.github.io/post/install-old-package-with-brew/</link>
      <pubDate>Thu, 04 Apr 2019 15:22:47 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/install-old-package-with-brew/</guid>
      <description>Formulaが入ってるディレクトリに行く cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/ 目当てのバージョンでコミットされてるハッシュを見る $ git log foo.rb そのファイルを巻き戻す $ git checkout fd1dxxxx foo.rb 入れ</description>
    </item>
    
    <item>
      <title>覚えにくくてもいいようなランダム文字列を生成する</title>
      <link>https://dream-yt.github.io/post/random-string-gen-pwgen/</link>
      <pubDate>Mon, 25 Mar 2019 16:56:27 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/random-string-gen-pwgen/</guid>
      <description>pwgenを使うのが便利 $ pwgen --symbols --secure 12 1 `lJ+b9$&amp;quot;J}Cv pwgenはデフォルトだと覚えやすい感じで生成してくれるので、その辺をオプションでさらにランダムにして</description>
    </item>
    
    <item>
      <title>cognitoで特定ドメインのGoogleアカウントだけsignUpさせる</title>
      <link>https://dream-yt.github.io/post/cognito-presignup-lambda-trigger/</link>
      <pubDate>Sat, 23 Mar 2019 11:54:52 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/cognito-presignup-lambda-trigger/</guid>
      <description>lambda trigger を設定できるのでこの関数の中で可否を判定する Pre Sign-up Lambda Trigger - Amazon Cognito やり方 serverless framework を使うとこんな設定ができる trigger: PreSignUp の設定で、ユーザの新規登録前にチェック</description>
    </item>
    
    <item>
      <title>perlの正規表現、e(eval)オプション</title>
      <link>https://dream-yt.github.io/post/perl-regexp-eval-modifier/</link>
      <pubDate>Tue, 19 Mar 2019 17:12:58 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/perl-regexp-eval-modifier/</guid>
      <description>eオプションをつけるとマッチした箇所に好きな処理が書けて便利 e - evaluate the right-hand side as an expression たとえば以下はurlっぽい文字列をaタグに変換するサンプル my $url2link</description>
    </item>
    
    <item>
      <title>PostgreSQLで特定期間の日数/時間数などを数える</title>
      <link>https://dream-yt.github.io/post/psql-day-count/</link>
      <pubDate>Sat, 16 Mar 2019 17:00:00 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/psql-day-count/</guid>
      <description>PostgreSQLで特定期間の日数や時間数などを計算したいときの、計算方法メモ date型の場合 そのまま引き算すると整数で日数が出る 例 select cast(&#39;2019-01-01&#39; as</description>
    </item>
    
    <item>
      <title>swiftのメソッドに出てくる _ と #</title>
      <link>https://dream-yt.github.io/post/swift-function-_sharp/</link>
      <pubDate>Sat, 16 Mar 2019 13:01:39 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/swift-function-_sharp/</guid>
      <description>以下のバージョンのreplで動かした $ swift -v Apple Swift version 4.2.1 (swiftlang-1000.11.42 clang-1000.11.45.1) 前提 ラベル名が必要 もともとswiftではメソッド/関数には呼ぶときに引数と一緒にラベル</description>
    </item>
    
    <item>
      <title>swiftのselectorについて</title>
      <link>https://dream-yt.github.io/post/swift-memo-selector/</link>
      <pubDate>Sat, 16 Mar 2019 12:19:07 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/swift-memo-selector/</guid>
      <description>コールバックを渡すための仕組みのようなもの? たとえばメソッドを渡してイベントが発生した時の実行するような場合につかう? var button = UIButton() button.addTarget(self, action: &amp;#34;tappedButton:&amp;#34;, forControlEvents: .TouchUpInside) 今度</description>
    </item>
    
    <item>
      <title>MySQL、 auto incrementの確認と変更</title>
      <link>https://dream-yt.github.io/post/modify-auto-increment/</link>
      <pubDate>Fri, 15 Mar 2019 17:33:58 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/modify-auto-increment/</guid>
      <description>確認 show table status where Name = &amp;#39;{{ テーブル名 }}&amp;#39;\G 変更 ALTER TABLE &amp;#39;{{ テーブル名 }}&amp;#39; AUTO_INCREMENT = 1000000; 参考 MySQLでAUTO_INCREMENTを任意の数字に変更する - Bouldering &amp;amp; Com.</description>
    </item>
    
    <item>
      <title>React.cloneElementとは</title>
      <link>https://dream-yt.github.io/post/react-cloneelement/</link>
      <pubDate>Thu, 14 Mar 2019 15:03:40 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/react-cloneelement/</guid>
      <description>子要素にpropsを渡すための仕組み Reactではmutableを嫌うため、VDOMをimmutableに扱うための仕組み 既存の子要素そのま</description>
    </item>
    
    <item>
      <title>UIにおけるToastとは</title>
      <link>https://dream-yt.github.io/post/ui-toast/</link>
      <pubDate>Thu, 14 Mar 2019 12:43:20 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/ui-toast/</guid>
      <description>下からピョコッと出てくるやつのことだった いくつか確認を求める系のインタラクションがまとまっていた ons-toast - Onsen UI</description>
    </item>
    
    <item>
      <title>税抜き5000円で宴会のコースが取れる六本木のお店</title>
      <link>https://dream-yt.github.io/post/roppongi-under5000yen/</link>
      <pubDate>Sun, 10 Mar 2019 16:35:58 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/roppongi-under5000yen/</guid>
      <description>チームメンバーの飲み会、一人頭5000円まで会社の制度で補助してもらえる 六本木にて予算内で飲み会ができてそこそこ人数が入るところのリスト Cafe Rouge</description>
    </item>
    
    <item>
      <title>serverlessのcors対応</title>
      <link>https://dream-yt.github.io/post/serverless-cors-101/</link>
      <pubDate>Sat, 09 Mar 2019 19:11:52 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/serverless-cors-101/</guid>
      <description>s3に静的htmlをホスティングしてlambda/apigatewayからデータを取得する形でやろうとすると、当然s3とlambda / api</description>
    </item>
    
    <item>
      <title>envsubstを使って環境変数だけでサクッとテンプレート出力する</title>
      <link>https://dream-yt.github.io/post/envsubst-101/</link>
      <pubDate>Tue, 05 Mar 2019 15:20:05 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/envsubst-101/</guid>
      <description>gettextパッケージに入っているenvsubstコマンドを使うと、テンプレートファイルから環境変数を埋めて出力することができる GNU gettext utilities: envsubst Invocation</description>
    </item>
    
    <item>
      <title>jsでローカルのタイムゾーンに関係なく、日付っぽい文字列をUTCで評価したい</title>
      <link>https://dream-yt.github.io/post/js-date-utc/</link>
      <pubDate>Sun, 03 Mar 2019 19:13:14 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/js-date-utc/</guid>
      <description>jsのDateオブジェクトはデフォルトで色々な日付っぽい文字列を受け取るが、受け取った日付っぽい文字列をローカルのタイムゾーンとして評価して</description>
    </item>
    
    <item>
      <title>lodashのchain/wrapperオブジェクトをjsxで使う</title>
      <link>https://dream-yt.github.io/post/lodash-wrapper-jsx/</link>
      <pubDate>Sun, 03 Mar 2019 12:16:26 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/lodash-wrapper-jsx/</guid>
      <description>lodashのchainに配列を渡すとlodashWrapperオブジェクトが得られる。これはlodashの便利メソッドを色々持っているAr</description>
    </item>
    
    <item>
      <title>200が返ってこないURLを見つけるワンライナー</title>
      <link>https://dream-yt.github.io/post/find-non-200pk-url-oneliner/</link>
      <pubDate>Thu, 28 Feb 2019 08:36:33 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/find-non-200pk-url-oneliner/</guid>
      <description>./urllist.txt にはURLのリストが入ってるとして そのなかから404とかになってるURLを見つけたい場合 以下のコマンドでダメなURLだけ表示してくれる $ cat</description>
    </item>
    
    <item>
      <title>htmlで、雑にformから送信される値を見たい</title>
      <link>https://dream-yt.github.io/post/adhoc-formdata-logging/</link>
      <pubDate>Tue, 26 Feb 2019 12:47:49 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/adhoc-formdata-logging/</guid>
      <description>submitイベントを途中で止める FormDataクラスをつかう こんなコードを仕込めば値が一覧できる const form = document.querySelector(&amp;#39;form&amp;#39;); form.addEventListener(&amp;#39;submit&amp;#39;, (event) =&amp;gt; { const formData = new FormData(form); for (let i of formData.entries()) { console.log(i.join(&amp;#34;\t&amp;#34;));</description>
    </item>
    
    <item>
      <title>gitでsubmoduleをcloneする</title>
      <link>https://dream-yt.github.io/post/git-submodule-recursive/</link>
      <pubDate>Sun, 24 Feb 2019 22:34:40 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/git-submodule-recursive/</guid>
      <description>こんなオプションでできる $ git submodule update --init --recursive</description>
    </item>
    
    <item>
      <title>GoogleSpreadSheetへBigQueryからクエリできるようにする</title>
      <link>https://dream-yt.github.io/post/query-google-spreadsheet-with-bigquery/</link>
      <pubDate>Sun, 24 Feb 2019 17:28:42 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/query-google-spreadsheet-with-bigquery/</guid>
      <description>こんなコマンドでspreadsheetをbigqueryのテーブルのように使うことができる $ bq mk --external_table_definition=[SCHEMA]@[SOURCE_FORMAT]=[GOOGLE_DRIVE_URL] \ [DATASET_ID].[TABLE_NAME] 実際の値をいれるとこんな感じ $ export GOOGLE_SHEETS=&amp;#39;https://docs.google.com/spreadsheets/d/1r--MIJGEuZSgx9KMQxyAOL9S80cZaV8BM/edit#gid=1436148405&amp;#39; $ export</description>
    </item>
    
    <item>
      <title>bigqueryのtransfer_configの実行履歴の確認の仕方</title>
      <link>https://dream-yt.github.io/post/bigquery-transfer-log/</link>
      <pubDate>Sun, 24 Feb 2019 10:50:59 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/bigquery-transfer-log/</guid>
      <description>transfer_config 設定されているtransfer_configを一覧 $ bq --format=json ls --transfer_config --transfer_location=&amp;#39;us&amp;#39; | jq . transfer_run name を引数に渡してtransfer_runを一覧 $ bq --format=json ls --transfer_run --transfer_location=&amp;#39;us&amp;#39; \ projects/987573330809/locations/us/transferConfigs/5c5aff8c-0000-285b-bf15-089e08324cf4 summary 実行</description>
    </item>
    
    <item>
      <title>typescriptで特定ファイルのコンパイルエラーだけdisableする</title>
      <link>https://dream-yt.github.io/post/typescript-ts-ignore/</link>
      <pubDate>Sat, 23 Feb 2019 19:57:57 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/typescript-ts-ignore/</guid>
      <description>typescriptのコンパイラオプションは一般的にはtsconfig.jsonでプロジェクト全体のコンパイルの設定を定義することになる。た</description>
    </item>
    
    <item>
      <title>lambda/typescriptでexpressを使う</title>
      <link>https://dream-yt.github.io/post/express-serverless-typescript/</link>
      <pubDate>Sat, 23 Feb 2019 12:02:54 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/express-serverless-typescript/</guid>
      <description>express普通に便利なのでawslabs謹製のツールから使う awslabs/aws-serverless-express Run serverless applications and REST APIs using your existing Node.js application framework, on top of AWS Lambda and Amazon API Gateway 使い方 expressのappを生</description>
    </item>
    
    <item>
      <title>テキストに不可視な文字が入っている場合の対処</title>
      <link>https://dream-yt.github.io/post/invisible-char-in-textfile/</link>
      <pubDate>Thu, 14 Feb 2019 17:11:00 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/invisible-char-in-textfile/</guid>
      <description>不可視文字には \t (タブ) や \f (改ページ)など色々ある 環境によってトーフが表示されたりする 例 エディタでは大丈夫なのにGitHubに投稿するとト</description>
    </item>
    
    <item>
      <title>macで動画のビットレートを変更したい</title>
      <link>https://dream-yt.github.io/post/ffmpeg-for-bitrate/</link>
      <pubDate>Wed, 13 Feb 2019 15:20:54 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/ffmpeg-for-bitrate/</guid>
      <description>ffmpegを使う $ brew install ffmpeg こんな感じで使う $ ffmpeg -i ./inputfile.mp4 -b:v 2M -bufsize 10M ./outfile.mp4 -b:v 2M 指定したいbitrate。KBで指定したい場合は 320K のようにKを使う -bufsize 10M どれく</description>
    </item>
    
    <item>
      <title>BigQueryのtransfer_configを表示する</title>
      <link>https://dream-yt.github.io/post/bigquery-show-data-transfer-service/</link>
      <pubDate>Tue, 29 Jan 2019 22:32:51 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/bigquery-show-data-transfer-service/</guid>
      <description>以下の要領で表示できる $ bq --format=json ls --transfer_config --transfer_location=&amp;#39;us&amp;#39; $ bq show --transfer_config projects/123456789/locations/us/transferConfigs/xxxxxx 出力される設定はこんな感じ ( --format=json ) bq mk にこの形式のjsonを食わせると設定できるのだろうか? 🤔 $ bq</description>
    </item>
    
    <item>
      <title>Bigquery Data Transfer Service について</title>
      <link>https://dream-yt.github.io/post/bigquery-data-transfer-service/</link>
      <pubDate>Tue, 29 Jan 2019 08:43:23 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/bigquery-data-transfer-service/</guid>
      <description>$ bq mk --table --help で今まで知らなかったオプションを見つけた --[no]transfer_config: Create transfer config. --[no]transfer_run: Creates transfer runs for a time range. アドタグやGAのデータを自動的にBigQueryに取り込める設定の</description>
    </item>
    
    <item>
      <title>特定のファイルを消したコミットを確認する</title>
      <link>https://dream-yt.github.io/post/git-log-deleted-file/</link>
      <pubDate>Fri, 25 Jan 2019 13:49:58 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/git-log-deleted-file/</guid>
      <description>以下のコマンドで確認できる $ git log --diff-filter=D -- path/to/targetfile.pl -- 以降にファイル名を渡すとそのファイルの履歴だけ見ることが出来る [--] &amp;lt;path&amp;gt;... Show only commits that are enough to explain how the files that match the specified paths came</description>
    </item>
    
    <item>
      <title>Spreadsheetで下までコピペ</title>
      <link>https://dream-yt.github.io/post/spreadsheet-cell-copy/</link>
      <pubDate>Thu, 24 Jan 2019 08:58:09 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/spreadsheet-cell-copy/</guid>
      <description>同じ関数を相対参照で一番下の行までコピペしたいとき ＋マークをダブルクリックすると下まで行く その他 コピペと呼んでいるものにも2種類ある セルのコ</description>
    </item>
    
    <item>
      <title>VLOOKUPの使い方をメモ</title>
      <link>https://dream-yt.github.io/post/spreadsheet-vlookup/</link>
      <pubDate>Wed, 23 Jan 2019 09:40:35 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/spreadsheet-vlookup/</guid>
      <description>自分で使ったことがなかったので勉強 概要 指定した表のなかから条件にマッチした行の、指定したカラムの値を返してくれる VLOOKUP(検索キー, 範</description>
    </item>
    
    <item>
      <title>There is no document formatter for &#39;sql&#39;-files installed</title>
      <link>https://dream-yt.github.io/post/vscode-sql-formatter-stun/</link>
      <pubDate>Tue, 22 Jan 2019 12:52:05 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/vscode-sql-formatter-stun/</guid>
      <description>vscodeを使っている。SQLファイルは保存時にフォーマットされるようしているが、 ある日突然保存時フォーマットが聞かなくなった vscode</description>
    </item>
    
    <item>
      <title>ALBの直近1時間のリクエスト数をawscliで取得する</title>
      <link>https://dream-yt.github.io/post/alb-request-count-by-awscli/</link>
      <pubDate>Sun, 20 Jan 2019 15:05:24 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/alb-request-count-by-awscli/</guid>
      <description>以下のコマンドで取得できる aws cloudwatch --profile mossan get-metric-statistics \ --namespace &amp;#39;AWS/ApplicationELB&amp;#39; \ --metric-name &amp;#39;RequestCount&amp;#39; \ --dimensions &amp;#39;Name=LoadBalancer,Value=app/sakamoto-alb/xxxxxxxxx&amp;#39; \ --statistics &amp;#39;Sum&amp;#39; \ --start-time $(date -v -1H -u +&amp;#34;%Y-%m-%dT%H:%M&amp;#34;) \ --end-time $(date -u +&amp;#34;%Y-%m-%dT%H:%M&amp;#34;) \ --period 3600 --dimensions RequestCountのSumをどの軸でGro</description>
    </item>
    
    <item>
      <title>AWSでプロジェクトに存在するALBを一覧する</title>
      <link>https://dream-yt.github.io/post/list-alb-names/</link>
      <pubDate>Sun, 20 Jan 2019 14:57:42 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/list-alb-names/</guid>
      <description>aws cloudwatch list-metrics \ --namespace AWS/ApplicationELB \ --metric-name RequestCount \ | jq -r &amp;#39;.Metrics[].Dimensions[] | select(.Name | test(&amp;#34;LoadBalancer&amp;#34;)) | .Value&amp;#39; \ | sort \ | uniq jq の部分はjsonから必要な部分を抜き出すためのもの 配列を Name=LoadBalancer なオブジェクトにフィルタして</description>
    </item>
    
    <item>
      <title>athenaのUNIXタイムスタンプなカラムをJSTで一昨日から昨日の範囲でとる場合</title>
      <link>https://dream-yt.github.io/post/athena-before-yesterday-utc-jst/</link>
      <pubDate>Sun, 20 Jan 2019 12:25:05 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/athena-before-yesterday-utc-jst/</guid>
      <description>下記の図でJSTでの18日〜19日のデータが欲しい場合のこと 前提 日本で使いたいデータなので「日本時間での一昨日から昨日」 カラムにはunixタ</description>
    </item>
    
    <item>
      <title>PythonでTimezone Aware(Jst)なdatetimeを作る</title>
      <link>https://dream-yt.github.io/post/python-jst-timezone-aware-datetime/</link>
      <pubDate>Sat, 12 Jan 2019 23:42:03 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/python-jst-timezone-aware-datetime/</guid>
      <description>ググっても簡単なのが出てこなかったのでメモ 環境は python 3.6.7 こんな定義で引数に渡した日付時間がJSTのdatetimeになる from pytz import timezone def jst_datetime(*args): rest = [0] * (7 -</description>
    </item>
    
    <item>
      <title>hostileで/etc/hostsをテキスト管理する</title>
      <link>https://dream-yt.github.io/post/etc-hosts-hostile/</link>
      <pubDate>Mon, 07 Jan 2019 17:24:25 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/etc-hosts-hostile/</guid>
      <description>feross/hostile: Simple, programmatic /etc/hosts manipulation (in node.js) install インストールはyarnで入る (brewとかは用意されてなさそう) $ yarn global add hostile load hostile load コマンドで引数に渡した定義が/etc/hos</description>
    </item>
    
    <item>
      <title>AudioConverterNew returned -50</title>
      <link>https://dream-yt.github.io/post/macmini-audioconverternew-50/</link>
      <pubDate>Wed, 02 Jan 2019 20:13:32 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/macmini-audioconverternew-50/</guid>
      <description>2019-01-02 18:56:01.693434+0900 MyAPP[7575:859800] [AQ] 1154: AudioConverterNew returned -50 Mac miniでAVAudioRecorderを使おうと際にすると出るwarning macbookなどには音声入力があるが、Ma</description>
    </item>
    
    <item>
      <title>loguruとnotifiersを使ってslack通知をする</title>
      <link>https://dream-yt.github.io/post/loguru-notifiers/</link>
      <pubDate>Wed, 02 Jan 2019 12:55:49 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/loguru-notifiers/</guid>
      <description>前提 slackはincomming webhookをdeprecateとしている notifiersはincomming webhookにしか対応</description>
    </item>
    
    <item>
      <title>最近払い出した Slackの Incoming Webhooks で通知チャンネルを変更する</title>
      <link>https://dream-yt.github.io/post/slack-webhook-deprecated/</link>
      <pubDate>Wed, 02 Jan 2019 12:29:19 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/slack-webhook-deprecated/</guid>
      <description>残念 変更できないので調べたところ、 もうIncoming Webhooksでは通知チャンネルが変更できなくなっている Deprecated ドキュメントを見に行ったら</description>
    </item>
    
    <item>
      <title>vscodeでエラーメッセージを英語にする</title>
      <link>https://dream-yt.github.io/post/vscode-locale-change/</link>
      <pubDate>Tue, 25 Dec 2018 14:59:41 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/vscode-locale-change/</guid>
      <description>表示言語の設定は設定ファイルとは別ファイル管理になっている 以下のファイルで設定されている ~/Library/Application\ Support/Code/User/locale.json localeの値をよしなに変更すれば良い { // VS Code</description>
    </item>
    
    <item>
      <title>JavaScript heap out of memory になんとなくで対処する場合とchromeでデバッグする場合</title>
      <link>https://dream-yt.github.io/post/javascript-heap-out-of-memory/</link>
      <pubDate>Sun, 16 Dec 2018 12:05:36 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/javascript-heap-out-of-memory/</guid>
      <description>例えばwebpackの処理で以下のエラーが出た場合の話 $ serverless deploy --function App --stage prod Serverless: Bundling with Webpack... ...中略... FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory 1: node::Abort() [~/.nodebrew/node/v8.10.0/bin/node] 2: node::FatalException(v8::Isolate*, v8::Local&amp;lt;v8::Value&amp;gt;, v8::Local&amp;lt;v8::Message&amp;gt;) [~/.nodebrew/node/v8.10.0/bin/node] ...中略</description>
    </item>
    
    <item>
      <title>mongodump/mongoexportのやりかた</title>
      <link>https://dream-yt.github.io/post/mongodump-101/</link>
      <pubDate>Fri, 14 Dec 2018 13:11:58 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/mongodump-101/</guid>
      <description>mongoexport ってのでjson形式で吐き出せる (jqを使って作業がしやすい) mongoexport \ --host=aws-singapore-free-shard-00-01-xxxx.mongodb.net \ --port=27017 \ --username=app \ --authenticationDatabase=admin \ --password=xxxxxx \ --ssl \ --db=abcd \ --collection=profiles \ --out /tmp/profiles.json</description>
    </item>
    
    <item>
      <title>vscodeからdockerコンテナ内でperl -wcして文法チェック</title>
      <link>https://dream-yt.github.io/post/vscode-perl-docker-linter/</link>
      <pubDate>Wed, 12 Dec 2018 08:12:58 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/vscode-perl-docker-linter/</guid>
      <description>こちらを使うと簡単に出来た henriiik/vscode-docker-linter: Lint the things in your docker containers 設定 設定項目もこれくらいで済む &amp;#34;docker-linter.perl.enable&amp;#34;: true, &amp;#34;docker-linter.perl.machine&amp;#34;: &amp;#34;&amp;#34;, // &amp;#34;default&amp;#34;だとdocker-mac</description>
    </item>
    
    <item>
      <title>cloudwatch、アラームの設定 (period, treatMissingData)</title>
      <link>https://dream-yt.github.io/post/cloudwatch-alarm-treatmissingdata/</link>
      <pubDate>Sun, 09 Dec 2018 14:07:39 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/cloudwatch-alarm-treatmissingdata/</guid>
      <description>serverless-plugin-aws-alerts を使うとアラームの設定/適用まで簡単に出来る ACloudGuru/serverless-plugin-aws-alerts: A Serverless Framework plugin that creates CloudWatch alarms for functions. 以下の設定項目はパッと見で分からなかったのでメモ period treatMissingData period メトリクスの数値を</description>
    </item>
    
    <item>
      <title>serverless deploy で生成されるリソースを事前に確認する</title>
      <link>https://dream-yt.github.io/post/sls-package-cloudformation-stack/</link>
      <pubDate>Sat, 08 Dec 2018 23:48:03 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/sls-package-cloudformation-stack/</guid>
      <description>serverlessのプラグインを使うと色々なリソースを勝手に作ってくれたりして便利だが、実行するまでプラグインのyaml設定が思い通りにな</description>
    </item>
    
    <item>
      <title>いまのブランチでいじってるファイルをいっぺんにvscodeで開く</title>
      <link>https://dream-yt.github.io/post/git-branch-diff-files-open-vscode/</link>
      <pubDate>Thu, 06 Dec 2018 14:25:18 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/git-branch-diff-files-open-vscode/</guid>
      <description>なお、ブランチはmasterから派生させている前提 コマンド全体 最初にmasterから分岐した箇所のコミットハッシュを取得している BASE=$(git show-branch --merge-base master HEAD); git</description>
    </item>
    
    <item>
      <title>環境変数にセットしてあるGoogleのJWTを使って認証する</title>
      <link>https://dream-yt.github.io/post/enviroment-value-google-jwt-credential/</link>
      <pubDate>Tue, 04 Dec 2018 10:05:39 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/enviroment-value-google-jwt-credential/</guid>
      <description>GoogleのAPIを叩く際に、GOOGLE_APPLICATION_CREDENTIALSを使ってファイルから認証情報を読み取る例は書いて</description>
    </item>
    
    <item>
      <title>サービスアカウントで認証してGoogleSpreadsheetからデータを取得</title>
      <link>https://dream-yt.github.io/post/spreadsheet-via-service-account/</link>
      <pubDate>Sat, 01 Dec 2018 16:30:16 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/spreadsheet-via-service-account/</guid>
      <description>spreadsheetのデータを取ってくるやり方をググったらいいのが見つからなかった 認証周りをガバガバでやってそう 古い認証方式(oauth</description>
    </item>
    
    <item>
      <title>commitを別の作業branchへ移動する方法</title>
      <link>https://dream-yt.github.io/post/git-cherry-pick/</link>
      <pubDate>Wed, 28 Nov 2018 22:27:25 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/git-cherry-pick/</guid>
      <description>これは一体 Gitで何度も陥ってしまう過ちにまたハマってしまう日が来ても、乗り越えられる自分でありたい。 そのための備忘録です。 状況 新しい作業の</description>
    </item>
    
    <item>
      <title>pythonの__del__</title>
      <link>https://dream-yt.github.io/post/python-__del__/</link>
      <pubDate>Mon, 26 Nov 2018 12:21:22 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/python-__del__/</guid>
      <description>軽くドキュメントを読んでメモ 次のような雰囲気のメソッドのようだ デストラクタとして使わない やむおえない時だけ使う 変な使い方はしない ドキュメント</description>
    </item>
    
    <item>
      <title>Lambdaでcallbackを呼んでるのにタイムアウト扱いになる場合</title>
      <link>https://dream-yt.github.io/post/lambda-callbackwaitsforemptyeventloop/</link>
      <pubDate>Sat, 24 Nov 2018 12:47:49 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/lambda-callbackwaitsforemptyeventloop/</guid>
      <description>lambdaはcallbackが呼ばれても、イベントループが残っていたらプロセスを待機させてしまう。使用しているライブラリがコネクションをポ</description>
    </item>
    
    <item>
      <title>macosでパイプで翻訳してくれるtransコマンドを使う</title>
      <link>https://dream-yt.github.io/post/trans-command-on-macos/</link>
      <pubDate>Fri, 23 Nov 2018 14:18:17 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/trans-command-on-macos/</guid>
      <description>soimort/translate-shell: Command-line translator using Google Translate, Bing Translator, Yandex.Translate, DeepL Translator, etc. インストール brew install gawk # 依存してるのでmacosの場合必要 sudo wget git.io/trans -O /usr/local/bin/trans sudo chmod +x /usr/local/bin/trans 使い方 $ trans --help | head -1 Usage: trans [OPTIONS] [SOURCE]:[TARGETS] [TEXT]... 例えば 日本語(j</description>
    </item>
    
    <item>
      <title>LambdaのエラーをコーディングなしでSlack通知までしてもらう設定</title>
      <link>https://dream-yt.github.io/post/codeless-lambda-error-slack-notify/</link>
      <pubDate>Fri, 23 Nov 2018 14:04:09 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/codeless-lambda-error-slack-notify/</guid>
      <description>serverlessを使っている前提 slackの bring emails into slack を使う slack通知用のメールアドレスを取得 このアドレスにメールを送ると、内容がsl</description>
    </item>
    
    <item>
      <title>的外れな言葉に傷つく前に読む雑記</title>
      <link>https://dream-yt.github.io/post/zakki-181120-dream/</link>
      <pubDate>Tue, 20 Nov 2018 23:59:56 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/zakki-181120-dream/</guid>
      <description>これは一体 文章を書く練習の一貫で、最近思ったことを書く。箇条書きと文章を使い分けられるいいかんじの人を目指して。雑記です。もう。身の回りでも</description>
    </item>
    
    <item>
      <title>aws-cdkを使い始めるまでメモ</title>
      <link>https://dream-yt.github.io/post/aws-cdk-101/</link>
      <pubDate>Sat, 17 Nov 2018 22:30:32 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/aws-cdk-101/</guid>
      <description>プロジェクトを作成する app ってのはサブコマンドで、「アプリ開発者として使う」という意味 (libってのがあって、それはcdkのライブラリ作者が使</description>
    </item>
    
    <item>
      <title>年末調整で毎回調べる諸々</title>
      <link>https://dream-yt.github.io/post/salary-man-year-end-adjustment/</link>
      <pubDate>Sat, 17 Nov 2018 11:41:24 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/salary-man-year-end-adjustment/</guid>
      <description>年末調整で毎回調べる諸々 源泉徴収とは サラリーマンも税金を払う必要があるが、 それを会社が代わりに徴収してくれる制度のこと 【完全版】5分で理解で</description>
    </item>
    
    <item>
      <title>【ロゴ作成】RGBとCMYKの色マニュアルを作った時の備忘録</title>
      <link>https://dream-yt.github.io/post/logo-colormode/</link>
      <pubDate>Wed, 07 Nov 2018 12:51:45 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/logo-colormode/</guid>
      <description>状況 新ロゴができたので、RGBとCMYKで色のマニュアルを作る。 が。 RGBで作成したAiデータをCMYKに変換しただけでは、色が変わってしま</description>
    </item>
    
    <item>
      <title>athenacliを使う</title>
      <link>https://dream-yt.github.io/post/gettingstarted-athenacli/</link>
      <pubDate>Sat, 03 Nov 2018 18:11:44 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/gettingstarted-athenacli/</guid>
      <description>awscliにはathenaサブコマンドが用意されているが、gcpのbqコマンドのように便利な雰囲気ではない athena — AWS CLI 1.16.47 Command Reference シェルスクリプトに</description>
    </item>
    
    <item>
      <title>jq での変形例 (keys[]でのオブジェクト=&gt;オブジェクト編) </title>
      <link>https://dream-yt.github.io/post/jq-sample-keys-obj-children/</link>
      <pubDate>Sat, 03 Nov 2018 17:45:49 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/jq-sample-keys-obj-children/</guid>
      <description>こんなjsonがあって { &amp;#34;xxxxxx&amp;#34;: { &amp;#34;_name&amp;#34;: &amp;#34;トーマス&amp;#34;, &amp;#34;children&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;トーマス（男性向け）&amp;#34;, &amp;#34;code&amp;#34;: &amp;#34;41080&amp;#34; }, { &amp;#34;code&amp;#34;: &amp;#34;41081&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;トーマ</description>
    </item>
    
    <item>
      <title>GoogleSpreadsheetのデータ(csv)をパパッとjsonにしてスクリプトから使う</title>
      <link>https://dream-yt.github.io/post/googlespreadsheet-csv-json-perl/</link>
      <pubDate>Sat, 03 Nov 2018 17:24:38 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/googlespreadsheet-csv-json-perl/</guid>
      <description>csvjsonを使うとcsv =&amp;gt; json が簡単に変換できる csvjsonはcsvkitをインストールすると入ってくる $ brew install csvkit ... $ which csvjson /usr/local/bin/csvjson csvでダウン</description>
    </item>
    
    <item>
      <title>BigQueryの日付分割テーブルを使う</title>
      <link>https://dream-yt.github.io/post/bq-time_partitioning_field/</link>
      <pubDate>Sun, 28 Oct 2018 02:24:40 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/bq-time_partitioning_field/</guid>
      <description>bigqueryで探索するディスク領域を節約する方法は過去たくさんあった _YYYYMMDD suffix pattern using the _PARTITIONTIME pseudo-column これはまだ今でも現役なところが多そう TIMESTAMP</description>
    </item>
    
    <item>
      <title>dockerコンテナ内でstraceを使う</title>
      <link>https://dream-yt.github.io/post/strace-in-docker-container/</link>
      <pubDate>Wed, 24 Oct 2018 23:36:47 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/strace-in-docker-container/</guid>
      <description>docker runに起動オブションをつけないとstraceは実行できない これはセキュリティの見地からdocker内では呼んで良いシステムコールが制限さ</description>
    </item>
    
  </channel>
</rss>