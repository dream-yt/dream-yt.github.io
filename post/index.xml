<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on sacre</title>
    <link>https://dream-yt.github.io/post/</link>
    <description>Recent content in Posts on sacre</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 25 Aug 2019 15:44:56 +0900</lastBuildDate>
    
	<atom:link href="https://dream-yt.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>webpackで、プロジェクトのファイルを@ディレクトリ配下でimportできるような設定</title>
      <link>https://dream-yt.github.io/post/import-withmark-in-typescript-vscode-jest/</link>
      <pubDate>Sun, 25 Aug 2019 15:44:56 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/import-withmark-in-typescript-vscode-jest/</guid>
      <description>webpackだとsymlink貼ったり NODE_PATH をいじったりする必要はない 差分 webpack.config.js を変更しないとビルドできない resolve: { + alias: { &#39;@&#39;: path.resolve(__dirname, &#39;./src/&#39;) }, extensions: [&#39;.ts&#39;, &#39;.tsx&#39;, &#39;.js&#39;] }, 正常にビル</description>
    </item>
    
    <item>
      <title>serverless-webpack のプロジェクトで serverless-offline 実行時に NODE_ENV を設定する</title>
      <link>https://dream-yt.github.io/post/serverless-webpack-offline-node_env/</link>
      <pubDate>Sun, 25 Aug 2019 15:06:15 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/serverless-webpack-offline-node_env/</guid>
      <description>地味だがハマった。ちょうどおんなじことをしていた人の解決策が見つかって助かった MNML ↑の方法でうまくいった つまり原因は こういうことらしい webpack はNO</description>
    </item>
    
    <item>
      <title>athena(presto)で、dateとtimeからJSTを得る</title>
      <link>https://dream-yt.github.io/post/cloudfront-access-log-jst-datetime/</link>
      <pubDate>Sat, 24 Aug 2019 16:00:57 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/cloudfront-access-log-jst-datetime/</guid>
      <description>CloudFrontのログファイルをathenaでテーブルにすると、dateカラムとtimeカラムで別カラムになっている Amazon CloudFront ログのクエリ - Amazon</description>
    </item>
    
    <item>
      <title>serverless-kms-secrets を導入する手順</title>
      <link>https://dream-yt.github.io/post/serverless-kms-secrets-101/</link>
      <pubDate>Sat, 17 Aug 2019 18:28:17 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/serverless-kms-secrets-101/</guid>
      <description>こちらの使い方 nordcloud/serverless-kms-secrets: 🔑🔐☁️ Serverless plugin to encrypt variables with KMS インストール $ npm install --save-dev serverless-kms-secrets CMKを生成 kmsでCMKを作成 s$ aws kms create-key --description &#39;for_some&#39; { &amp;quot;KeyMetadata&amp;quot;: { &amp;quot;AWSAccountId&amp;quot;: &amp;quot;00000000&amp;quot;, &amp;quot;KeyId&amp;quot;: &amp;quot;xxxxxxxx-f24e-4dc0-b639-2eee249d5be8&amp;quot;, &amp;quot;Arn&amp;quot;: &amp;quot;arn:aws:kms:ap-northeast-1:00000000:key/xxxxxxxx-f24e-4dc0-b639-2eee249d5be8&amp;quot;, &amp;quot;CreationDate&amp;quot;: 1566028483.619, &amp;quot;Enabled&amp;quot;: true, &amp;quot;Description&amp;quot;: &amp;quot;for_some&amp;quot;, &amp;quot;KeyUsage&amp;quot;: &amp;quot;ENCRYPT_DECRYPT&amp;quot;, &amp;quot;KeyState&amp;quot;:</description>
    </item>
    
    <item>
      <title>AWS Key Management Service (KMS) 入門</title>
      <link>https://dream-yt.github.io/post/aws-kms-101/</link>
      <pubDate>Sat, 17 Aug 2019 16:43:19 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/aws-kms-101/</guid>
      <description>AWS Key Management Service とは - AWS Key Management Service AWS Key Management Service (AWS KMS) は、データの暗号化に使用される暗号化キーの作成と管理を容易にするマネージド型サービスです。お客様が AWS KMS で作</description>
    </item>
    
    <item>
      <title>bigqueryのクエリ結果をgcsに出力するスクリプト</title>
      <link>https://dream-yt.github.io/post/bigquery-export-gcs-script-py/</link>
      <pubDate>Sat, 10 Aug 2019 16:24:49 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/bigquery-export-gcs-script-py/</guid>
      <description>こんな段取りで行う テンポラリなテーブルを作って、そこにクエリの結果を入れる そのテンポラリなテーブルを、データエクスポート機能を使ってgcsに</description>
    </item>
    
    <item>
      <title>プロジェクトの.bigqueryrcの設定</title>
      <link>https://dream-yt.github.io/post/bq-bigqueryrc-in-project/</link>
      <pubDate>Thu, 08 Aug 2019 12:14:56 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/bq-bigqueryrc-in-project/</guid>
      <description>bqコマンド、--maximum_bytes_billed とか、デフォルトで設定しておきたいオプションはある .bigqueryrc というファイルを使うとbqコマ</description>
    </item>
    
    <item>
      <title>serverless deploy を amazonlinuxイメージで行う</title>
      <link>https://dream-yt.github.io/post/serverless-deploy-from-docker-container/</link>
      <pubDate>Mon, 05 Aug 2019 11:32:41 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/serverless-deploy-from-docker-container/</guid>
      <description>lambdaとnodeのネイティブモジュール周りで辛いことになった時用 Dockerfile FROM amazonlinux:latest RUN curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo &amp;gt; /etc/yum.repos.d/yarn.repo RUN curl --silent --location https://rpm.nodesource.com/setup_10.x | bash RUN yum install -y nodejs gcc-c++ make git yarn RUN yarn global add serverless --silent --no-progress RUN mkdir</description>
    </item>
    
    <item>
      <title>nodejs/typescriptでSNSイベントからgetMetricWidgetImage(画像)を取得する</title>
      <link>https://dream-yt.github.io/post/node-getmetricwidgetimagewithsnsevent/</link>
      <pubDate>Sun, 04 Aug 2019 13:25:09 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/node-getmetricwidgetimagewithsnsevent/</guid>
      <description>こんな感じのコードでできた MetricWidget の型定義はaws-sdkにはなかった ドキュメントにはなっていた GetMetricWidgetImage: Metric Widget Structure and Syntax - Amazon CloudWatch SNSEvent の型定義は↓ DefinitelyTyped/index.d.ts at master · DefinitelyTyped/DefinitelyTyped import { SNSEvent }</description>
    </item>
    
    <item>
      <title>TypescriptでLambdaのハンドラーを書いてbashでアップロードする</title>
      <link>https://dream-yt.github.io/post/typescript-lambda-shellscript/</link>
      <pubDate>Sun, 04 Aug 2019 13:16:56 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/typescript-lambda-shellscript/</guid>
      <description>普通だとlambdaのアップロードはserverlessなどフレームワークを使うが、package.jsonを別に作りたくない場合があり、デ</description>
    </item>
    
    <item>
      <title>perlのstrict/utf8フラグについて</title>
      <link>https://dream-yt.github.io/post/perl-use-strict-utf8-flag/</link>
      <pubDate>Tue, 30 Jul 2019 14:42:22 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/perl-use-strict-utf8-flag/</guid>
      <description>なんとなく知識では知っていたけど試したことがなかったのでメモ perlにはstrictフラグというものがあって、 構文エラーにならないけど変な式</description>
    </item>
    
    <item>
      <title>AWS、LambdaまわりのIAM入門</title>
      <link>https://dream-yt.github.io/post/aws-iam-101/</link>
      <pubDate>Sun, 28 Jul 2019 09:54:35 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/aws-iam-101/</guid>
      <description>lambda を使っていて、権限周りが分からなかったのでメモ 用語 IAM IAMロール ポリシー IAMポリシー リソースポリシー IAM 権限周りを管理しているエンティティ</description>
    </item>
    
    <item>
      <title>rsyncでディレクトリをコピーする</title>
      <link>https://dream-yt.github.io/post/rsync-clone-directory/</link>
      <pubDate>Fri, 26 Jul 2019 09:34:34 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/rsync-clone-directory/</guid>
      <description>送信元ディレクトリと送信先ディレクトリを同じ状態にしたいときは下記のような指定をする $ rsync \ -e &amp;quot;ssh -i ~/.ssh/id_rsa&amp;quot; \ -ahv --compress --delete ./webui/public/ admin@test.jp:/www/data/ ssh鍵が指定が必要な場合は-</description>
    </item>
    
    <item>
      <title>firebase上でtypescriptで書かれたnextjsを動かす</title>
      <link>https://dream-yt.github.io/post/firebase-next-typescript/</link>
      <pubDate>Thu, 18 Jul 2019 09:21:04 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/firebase-next-typescript/</guid>
      <description>こちらのexampleを動かしながらデプロイまでの流れをみる next.js/examples/with-firebase-hosting at master · zeit/next.js できればtypescriptで開発したいので、それでどのへんをいじれば</description>
    </item>
    
    <item>
      <title>GCPのCloud Build入門</title>
      <link>https://dream-yt.github.io/post/gcp-cloudbuild-101/</link>
      <pubDate>Wed, 17 Jul 2019 15:47:50 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/gcp-cloudbuild-101/</guid>
      <description>circleciではシェルのコマンドを組み合わせてビルドを実施するが、 GCPのcloudbuildはdockerイメージを使ってビルドを実施</description>
    </item>
    
    <item>
      <title>bashでファイルの拡張子を一括変更する</title>
      <link>https://dream-yt.github.io/post/change-file-extention-with-bash/</link>
      <pubDate>Tue, 16 Jul 2019 11:23:13 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/change-file-extention-with-bash/</guid>
      <description>たとえばsrc配下のjsファイルをぜんぶtsファイルに変更したい場合は以下のように書ける $ find ./src -name &#39;*.js&#39; -type f \ | perl -wnlE &#39;/(\S+).js/ and say &amp;quot;$1.js $1.ts&amp;quot;&#39; \ | xargs -n2 mv 動作 find ./src -name</description>
    </item>
    
    <item>
      <title>package.jsonの古いファイルをいっぺんに更新する</title>
      <link>https://dream-yt.github.io/post/update-npm-outdated/</link>
      <pubDate>Mon, 15 Jul 2019 18:50:46 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/update-npm-outdated/</guid>
      <description>古いパッケージの一覧 $ npm outdated こんな感じの出力が得られる $ npm outdated Package Current Wanted Latest Location firebase-functions 2.3.1 2.3.1 3.1.0 project_name firebase-tools 6.12.0 6.12.0 7.1.0 project_name いっぺんに更新する 以下のようなワンライナーで全部最新</description>
    </item>
    
    <item>
      <title>SameSite Cookie とは</title>
      <link>https://dream-yt.github.io/post/samesite-cookie/</link>
      <pubDate>Thu, 11 Jul 2019 12:25:34 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/samesite-cookie/</guid>
      <description>こういう機能 今開いているページのドメインから、別のドメインにリクエストを送る際に、 クッキーを送るかどうかを設定できる機能 別のドメインにリクエ</description>
    </item>
    
    <item>
      <title>SSL越しにローカルの静的ファイルを閲覧したい (開発用)</title>
      <link>https://dream-yt.github.io/post/devserver-ssl-static/</link>
      <pubDate>Wed, 10 Jul 2019 18:26:22 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/devserver-ssl-static/</guid>
      <description>SSLさせてくれるhttpサーバのコード こちらから拝借 simple-https-server.py import http.server import ssl server_address = (&#39;127.0.0.1&#39;, 443) httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler) httpd.socket = ssl.wrap_socket(httpd.socket, server_side=True, certfile=&amp;quot;server.pem&amp;quot;, keyfile=&amp;quot;key.pem&amp;quot;, ssl_version=ssl.PROTOCOL_TLS) httpd.serve_forever() 証明書を作ってserver start $ mkdir /tmp/$(pwgen) &amp;amp;&amp;amp; cd $_ $ pbpaste</description>
    </item>
    
    <item>
      <title>dockerイメージの、レイヤーとサイズの関係をみる</title>
      <link>https://dream-yt.github.io/post/docker-image-history/</link>
      <pubDate>Fri, 05 Jul 2019 12:52:40 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/docker-image-history/</guid>
      <description>docker history を使うとみられる 例 $ docker history --no-trunc --format=&amp;quot;{{.Size}}\t{{.CreatedBy}}&amp;quot; perl:5.20.0 0B /bin/sh -c #(nop) CMD [perl5.20.0 -de0] 0B /bin/sh -c #(nop) WORKDIR /root 6.55MB /bin/sh -c curl -LO https://raw.githubusercontent.com/miyagawa/cpanminus/master/cpanm &amp;amp;&amp;amp; chmod +x cpanm &amp;amp;&amp;amp; ./cpanm App::cpanminus &amp;amp;&amp;amp; rm ./cpanm 0B /bin/sh -c #(nop) WORKDIR /usr/src 55MB /bin/sh -c ./Configure -Duse64bitall -des &amp;amp;&amp;amp; make -j$(nproc) &amp;amp;&amp;amp; TEST_JOBS=$(nproc) make test_harness &amp;amp;&amp;amp; make install &amp;amp;&amp;amp; make</description>
    </item>
    
    <item>
      <title>jq変形 {配列 =&gt; IDをキーとするオブジェクト}</title>
      <link>https://dream-yt.github.io/post/jq-object-add/</link>
      <pubDate>Wed, 03 Jul 2019 15:30:19 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/jq-object-add/</guid>
      <description>こんな配列を [ {&amp;quot;id&amp;quot;: &amp;quot;123&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;abc&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;456&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;qwe&amp;quot;} ] こうしたい { &amp;quot;123&amp;quot;: {&amp;quot;id&amp;quot;: &amp;quot;123&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;abc&amp;quot;}, &amp;quot;456&amp;quot;: {&amp;quot;id&amp;quot;: &amp;quot;456&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;qwe&amp;quot;} } add を使うとできる $ pbpaste | jq &#39;{ (.id): . } | [ . ] | add&#39; { &amp;quot;123&amp;quot;: { &amp;quot;id&amp;quot;: &amp;quot;123&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;abc&amp;quot; }, &amp;quot;456&amp;quot;: { &amp;quot;id&amp;quot;: &amp;quot;456&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;qwe&amp;quot; }</description>
    </item>
    
    <item>
      <title>React の Synthetic Event</title>
      <link>https://dream-yt.github.io/post/react-synthetic-event/</link>
      <pubDate>Mon, 01 Jul 2019 09:34:06 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/react-synthetic-event/</guid>
      <description>Reactに標準でついてくるEventオブジェクト Syntheticは合成という意味 ブラウザごとの差異を吸収してくれている SyntheticEvent – React event pooling なお、R</description>
    </item>
    
    <item>
      <title>typescriptでのnullチェック</title>
      <link>https://dream-yt.github.io/post/typescript-null-check-operator/</link>
      <pubDate>Sun, 30 Jun 2019 13:59:54 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/typescript-null-check-operator/</guid>
      <description>基本的にはイコール2つの演算子でチェックすれば undefinedとnullのどちらかであればtrueになる == null 例 $ ts-node &amp;gt; const v = {a: 1, c: null} undefined イコー</description>
    </item>
    
    <item>
      <title>ads.txt入門</title>
      <link>https://dream-yt.github.io/post/ads-txt-101/</link>
      <pubDate>Thu, 27 Jun 2019 17:17:06 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/ads-txt-101/</guid>
      <description>ads.txtという仕様がIABから出されている ads.txt - Authorized Digital Sellers - IAB Tech Lab 概要 ads.txtはメディアのドメイン配下に置かれるtxtファイル 枠を買い</description>
    </item>
    
    <item>
      <title>BigQueryで UNNEST のやりかた</title>
      <link>https://dream-yt.github.io/post/bigquery-unnest/</link>
      <pubDate>Wed, 26 Jun 2019 17:40:01 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/bigquery-unnest/</guid>
      <description>UNNEST は配列をフラットなレコードに直すための関数 こんなログデーブルがあったとして、post_arrayの配列をほぐしてフラットなレコードにしたい</description>
    </item>
    
    <item>
      <title>node-canvasをlambdaで動かす</title>
      <link>https://dream-yt.github.io/post/canvas-node-on-lambda/</link>
      <pubDate>Sat, 22 Jun 2019 13:00:03 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/canvas-node-on-lambda/</guid>
      <description>node-canvasは内部でネイティブモジュールを使用しているため、macos上でコンパイルしたものをlambdaにアップロードしても動作</description>
    </item>
    
    <item>
      <title>recodeコマンドでファイルの文字/改行コードを変更する</title>
      <link>https://dream-yt.github.io/post/recode-file-charactor-encoding/</link>
      <pubDate>Wed, 19 Jun 2019 17:09:44 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/recode-file-charactor-encoding/</guid>
      <description>文字コードの変換をするときはiconvを使うことが多かったが、recodeコマンドのほうが便利なことが多い 既存ファイルに置き換え(inpla</description>
    </item>
    
    <item>
      <title>redux-form (handleSubmit) 入門</title>
      <link>https://dream-yt.github.io/post/redux-form-101-handlesubmit/</link>
      <pubDate>Sun, 16 Jun 2019 10:23:17 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/redux-form-101-handlesubmit/</guid>
      <description>redux-form (handleSubmit) 入門 MyFormコンポーネントを定義 自前で実装するフォーム const MyForm = ({ handleSubmit }) =&amp;gt; ( &amp;lt;form onSubmit={handleSubmit}&amp;gt; &amp;lt;div&amp;gt; &amp;lt;label htmlFor=&amp;quot;firstName&amp;quot;&amp;gt;First Name&amp;lt;/label&amp;gt; &amp;lt;Field component={renderTextField} name=&amp;quot;firstName&amp;quot; type=&amp;quot;text&amp;quot; /&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;Submit&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt; ); ({ handleSubmit }) =&amp;gt; ( reduxFormか</description>
    </item>
    
    <item>
      <title>redashで数値カラムからカンマを取り除く</title>
      <link>https://dream-yt.github.io/post/redash-no-comma-number-column/</link>
      <pubDate>Wed, 12 Jun 2019 16:15:50 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/redash-no-comma-number-column/</guid>
      <description>画面下部のEdit Visualization カンマを取り除きたいカラムの Number format を 0 に変更 参考 Table Query Result Adding Commas · Issue #2778 · getredash/redash</description>
    </item>
    
    <item>
      <title>AWSのアクセストークンが昨日どんなAPIコールを行なったか確認する</title>
      <link>https://dream-yt.github.io/post/aws-cloudtrail-per-access-key/</link>
      <pubDate>Mon, 10 Jun 2019 13:31:32 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/aws-cloudtrail-per-access-key/</guid>
      <description>cloudtrailのlookup-eventsで昨日の分をすべてとる $ aws cloudtrail lookup-events \ --lookup-attributes AttributeKey=AccessKeyId,AttributeValue=xxxxxxxx \ --start-time $(date -v -2d -u +&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;) \ --end-time $(date -v -1d -u +&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;) \ | tee /tmp/_ 取得できるデータ Ev</description>
    </item>
    
    <item>
      <title>直近1週間の日付をdate形式で取得する</title>
      <link>https://dream-yt.github.io/post/date-sequence-bash/</link>
      <pubDate>Mon, 03 Jun 2019 18:01:44 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/date-sequence-bash/</guid>
      <description>seqとdate(mac上で作業しているのでgnu-date)を使う $ seq -7 0 | xargs -I{} gdate -d+{}days +&#39;%Y-%m-%d&#39; 2019-05-27 2019-05-28 2019-05-29 2019-05-30 2019-05-31 2019-06-01 2019-06-02 2019-06-03 こんな感じで mycommand --date 2019-05-27 mycommand --date 2019-05-28 mycommand --date 2019-05-29 mycommand --date 2019-05-30</description>
    </item>
    
    <item>
      <title>vscodeのextensionをvsixファイルからインストールする</title>
      <link>https://dream-yt.github.io/post/vscode-extention-by-vsix/</link>
      <pubDate>Sun, 02 Jun 2019 16:42:13 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/vscode-extention-by-vsix/</guid>
      <description>コマンドラインからcodeコマンドでできる $ code --install-extension ./auto-collapse-explorer-0.0.2.vsix --install-extension オプションが必要 .vsix ファイルを引数にとる 再起動 vscodeの再起動が必要(コマンドパレット</description>
    </item>
    
    <item>
      <title>csvからsqliteのdbファイルを作成/操作</title>
      <link>https://dream-yt.github.io/post/csv2sqlite-with-csvsql/</link>
      <pubDate>Sat, 25 May 2019 13:44:24 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/csv2sqlite-with-csvsql/</guid>
      <description>例えばathenaのクエリ結果のcsvをさらにこねたいときなど sqliteファイルを生成 $ csvsql \ --db sqlite:////tmp/_.db \ --tables t \ --insert ~/Downloads/3a032f51-1111-411b-8e6a-d19b2beba27e.csv $ sqlite3 /tmp/_.db &#39;.schema&#39; 出力 markdown形</description>
    </item>
    
    <item>
      <title>csvsqlを使ってサクッとスプレッドシートからmysqlにデータを入れる</title>
      <link>https://dream-yt.github.io/post/spreadsheet-csvsql/</link>
      <pubDate>Wed, 22 May 2019 12:57:56 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/spreadsheet-csvsql/</guid>
      <description>スプレッドシートに入れたいデータを書いてcsv形式でダウンロード csvをcsvsqlをつかってDBに入れる csvsql csvsqlはcsvkitをイン</description>
    </item>
    
    <item>
      <title>入門監視の読書メモ</title>
      <link>https://dream-yt.github.io/post/monitoring-101-reading-notes/</link>
      <pubDate>Sun, 19 May 2019 15:19:54 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/monitoring-101-reading-notes/</guid>
      <description>後から見返したり、おぼえておきたいことをメモ OSのメトリクスだけを対象にしたアラートは意味が薄い メトリクスが悪くなってもサービスに影響を与え</description>
    </item>
    
    <item>
      <title>Cannot write file ... because it would overwrite input file.</title>
      <link>https://dream-yt.github.io/post/vscode-typescript-allowjs-error/</link>
      <pubDate>Sat, 18 May 2019 12:31:40 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/vscode-typescript-allowjs-error/</guid>
      <description>typescriptのプロジェクトで開発中VSCodeでエラーメッセージが出た Error &amp;ldquo;Cannot write file &amp;hellip; because it would overwrite input file.&amp;rdquo; ファイルがすでに存在しているので書き出せ</description>
    </item>
    
    <item>
      <title>raspberry-piに固定IPを設定する</title>
      <link>https://dream-yt.github.io/post/raspberry-pi-static-ip/</link>
      <pubDate>Mon, 06 May 2019 22:12:51 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/raspberry-pi-static-ip/</guid>
      <description>結論としてはこんなコマンドでとりあえず固定IPを払い出せる echo &#39;interface eth0&#39; | tee -a /etc/dhcpcd.conf echo &#39;static ip_address=192.168.111.90/24&#39; | tee -a /etc/dhcpcd.conf echo &#39;static routers=192.168.111.1&#39; | tee -a /etc/dhcpcd.conf echo &#39;staitc domain_name_servers=192.168.111.1&#39; | tee -a /etc/dhcpcd.conf 以下、それぞれの項目につい</description>
    </item>
    
    <item>
      <title>Raspberry-Piのヘッドレスセットアップsshまで</title>
      <link>https://dream-yt.github.io/post/raspbian-stretch-setup/</link>
      <pubDate>Mon, 06 May 2019 20:57:43 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/raspbian-stretch-setup/</guid>
      <description>OSのイメージをダウンロード こちらから (Raspbianはどの機種のraspberry-piでも動くのかな) Download Raspbian for Raspberry Pi SDカードを初期化 Disk Utility.app</description>
    </item>
    
    <item>
      <title>circleci上でjest-watch-typeaheadがロードできずエラーになる場合</title>
      <link>https://dream-yt.github.io/post/jest-watchplugins-circleci-error/</link>
      <pubDate>Sat, 27 Apr 2019 12:38:51 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/jest-watchplugins-circleci-error/</guid>
      <description>前提 以下の場合だと(たぶん) circleci上でテストをするとき問題になる create-react-app で作業している yarn reject 済み こんなエラー circleci上でこんな感じ</description>
    </item>
    
    <item>
      <title>Spreadsheetで日付を文字列フォーマットして表示する</title>
      <link>https://dream-yt.github.io/post/spreadsheet-date-format/</link>
      <pubDate>Fri, 26 Apr 2019 15:14:18 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/spreadsheet-date-format/</guid>
      <description>TEXT関数を使えばよい =TEXT(G11, &amp;quot;m月d日（ddd）&amp;quot;) こんな感じで表示される 4月22日（月） ↑ G11 に日付文字列が入っている場合</description>
    </item>
    
    <item>
      <title>perlのDBIx::Class::ResultSetでちょい手の込んだSELECTの例1</title>
      <link>https://dream-yt.github.io/post/dbix-class-resultset-search1/</link>
      <pubDate>Mon, 08 Apr 2019 18:43:30 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/dbix-class-resultset-search1/</guid>
      <description>searchメソッドはすごい色々できるので覚えきれない 特に第二引数のハッシュに渡せるものがすごい色々できる $tab1_resultset-&amp;gt;search( { # 1つ目の引数は検索条件 &#39;tab1.id&#39; =&amp;gt; $id,</description>
    </item>
    
    <item>
      <title>BigQuery の Scheduled Query を設定する方法</title>
      <link>https://dream-yt.github.io/post/bigquery-create-scheduled-query/</link>
      <pubDate>Sun, 07 Apr 2019 13:48:43 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/bigquery-create-scheduled-query/</guid>
      <description>bigqueryの古いUIからの作成手順 クエリを実行 実行結果画面から Schedule Query のボタンから設定 旧UIのURLは https://bigquery.cloud.google.com/{{ project_id }} (新UIからリンクがなくなって</description>
    </item>
    
    <item>
      <title>homebrewで過去のversionをインストールする</title>
      <link>https://dream-yt.github.io/post/install-old-package-with-brew/</link>
      <pubDate>Thu, 04 Apr 2019 15:22:47 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/install-old-package-with-brew/</guid>
      <description>Formulaが入ってるディレクトリに行く cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/ 目当てのバージョンでコミットされてるハッシュを見る $ git log foo.rb そのファイルを巻き戻す $ git checkout fd1dxxxx foo.rb 入れ</description>
    </item>
    
    <item>
      <title>覚えにくくてもいいようなランダム文字列を生成する</title>
      <link>https://dream-yt.github.io/post/random-string-gen-pwgen/</link>
      <pubDate>Mon, 25 Mar 2019 16:56:27 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/random-string-gen-pwgen/</guid>
      <description>pwgenを使うのが便利 $ pwgen --symbols --secure 12 1 `lJ+b9$&amp;quot;J}Cv pwgenはデフォルトだと覚えやすい感じで生成してくれるので、その辺をオプションでさらにランダムにして</description>
    </item>
    
    <item>
      <title>cognitoで特定ドメインのGoogleアカウントだけsignUpさせる</title>
      <link>https://dream-yt.github.io/post/cognito-presignup-lambda-trigger/</link>
      <pubDate>Sat, 23 Mar 2019 11:54:52 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/cognito-presignup-lambda-trigger/</guid>
      <description>lambda trigger を設定できるのでこの関数の中で可否を判定する Pre Sign-up Lambda Trigger - Amazon Cognito やり方 serverless framework を使うとこんな設定ができる trigger: PreSignUp の設定で、ユーザの新規登録前にチェック</description>
    </item>
    
    <item>
      <title>perlの正規表現、e(eval)オプション</title>
      <link>https://dream-yt.github.io/post/perl-regexp-eval-modifier/</link>
      <pubDate>Tue, 19 Mar 2019 17:12:58 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/perl-regexp-eval-modifier/</guid>
      <description>eオプションをつけるとマッチした箇所に好きな処理が書けて便利 e - evaluate the right-hand side as an expression たとえば以下はurlっぽい文字列をaタグに変換するサンプル my $url2link</description>
    </item>
    
    <item>
      <title>Testpost</title>
      <link>https://dream-yt.github.io/post/testpost/</link>
      <pubDate>Sat, 16 Mar 2019 17:51:12 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/testpost/</guid>
      <description>test1</description>
    </item>
    
    <item>
      <title>PostgreSQLで特定期間の日数/時間数などを数える</title>
      <link>https://dream-yt.github.io/post/psql-day-count/</link>
      <pubDate>Sat, 16 Mar 2019 17:00:00 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/psql-day-count/</guid>
      <description>PostgreSQLで特定期間の日数や時間数などを計算したいときの、計算方法メモ date型の場合 そのまま引き算すると整数で日数が出る 例 select cast(&#39;2019-01-01&#39; as</description>
    </item>
    
    <item>
      <title>swiftのメソッドに出てくる _ と #</title>
      <link>https://dream-yt.github.io/post/swift-function-_sharp/</link>
      <pubDate>Sat, 16 Mar 2019 13:01:39 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/swift-function-_sharp/</guid>
      <description>以下のバージョンのreplで動かした $ swift -v Apple Swift version 4.2.1 (swiftlang-1000.11.42 clang-1000.11.45.1) 前提 ラベル名が必要 もともとswiftではメソッド/関数には呼ぶときに引数と一緒にラベル</description>
    </item>
    
    <item>
      <title>swiftのselectorについて</title>
      <link>https://dream-yt.github.io/post/swift-memo-selector/</link>
      <pubDate>Sat, 16 Mar 2019 12:19:07 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/swift-memo-selector/</guid>
      <description>コールバックを渡すための仕組みのようなもの? たとえばメソッドを渡してイベントが発生した時の実行するような場合につかう? var button = UIButton() button.addTarget(self, action: &amp;quot;tappedButton:&amp;quot;, forControlEvents: .TouchUpInside) 今度</description>
    </item>
    
    <item>
      <title>MySQL、 auto incrementの確認と変更</title>
      <link>https://dream-yt.github.io/post/modify-auto-increment/</link>
      <pubDate>Fri, 15 Mar 2019 17:33:58 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/modify-auto-increment/</guid>
      <description>確認 show table status where Name = &#39;{{ テーブル名 }}&#39;\G 変更 ALTER TABLE &#39;{{ テーブル名 }}&#39; AUTO_INCREMENT = 1000000; 参考 MySQLでAUTO_INCREMENTを任意の数字に変更する - Bouldering &amp;amp; Com.</description>
    </item>
    
    <item>
      <title>React.cloneElementとは</title>
      <link>https://dream-yt.github.io/post/react-cloneelement/</link>
      <pubDate>Thu, 14 Mar 2019 15:03:40 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/react-cloneelement/</guid>
      <description>子要素にpropsを渡すための仕組み Reactではmutableを嫌うため、VDOMをimmutableに扱うための仕組み 既存の子要素そのま</description>
    </item>
    
    <item>
      <title>UIにおけるToastとは</title>
      <link>https://dream-yt.github.io/post/ui-toast/</link>
      <pubDate>Thu, 14 Mar 2019 12:43:20 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/ui-toast/</guid>
      <description>下からピョコッと出てくるやつのことだった いくつか確認を求める系のインタラクションがまとまっていた ons-toast - Onsen UI</description>
    </item>
    
    <item>
      <title>税抜き5000円で宴会のコースが取れる六本木のお店</title>
      <link>https://dream-yt.github.io/post/roppongi-under5000yen/</link>
      <pubDate>Sun, 10 Mar 2019 16:35:58 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/roppongi-under5000yen/</guid>
      <description>チームメンバーの飲み会、一人頭5000円まで会社の制度で補助してもらえる 六本木にて予算内で飲み会ができてそこそこ人数が入るところのリスト Cafe Rouge</description>
    </item>
    
    <item>
      <title>serverlessのcors対応</title>
      <link>https://dream-yt.github.io/post/serverless-cors-101/</link>
      <pubDate>Sat, 09 Mar 2019 19:11:52 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/serverless-cors-101/</guid>
      <description>s3に静的htmlをホスティングしてlambda/apigatewayからデータを取得する形でやろうとすると、当然s3とlambda / api</description>
    </item>
    
    <item>
      <title>envsubstを使って環境変数だけでサクッとテンプレート出力する</title>
      <link>https://dream-yt.github.io/post/envsubst-101/</link>
      <pubDate>Tue, 05 Mar 2019 15:20:05 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/envsubst-101/</guid>
      <description>gettextパッケージに入っているenvsubstコマンドを使うと、テンプレートファイルから環境変数を埋めて出力することができる GNU gettext utilities: envsubst Invocation</description>
    </item>
    
    <item>
      <title>jsでローカルのタイムゾーンに関係なく、日付っぽい文字列をUTCで評価したい</title>
      <link>https://dream-yt.github.io/post/js-date-utc/</link>
      <pubDate>Sun, 03 Mar 2019 19:13:14 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/js-date-utc/</guid>
      <description>jsのDateオブジェクトはデフォルトで色々な日付っぽい文字列を受け取るが、受け取った日付っぽい文字列をローカルのタイムゾーンとして評価して</description>
    </item>
    
    <item>
      <title>lodashのchain/wrapperオブジェクトをjsxで使う</title>
      <link>https://dream-yt.github.io/post/lodash-wrapper-jsx/</link>
      <pubDate>Sun, 03 Mar 2019 12:16:26 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/lodash-wrapper-jsx/</guid>
      <description>lodashのchainに配列を渡すとlodashWrapperオブジェクトが得られる。これはlodashの便利メソッドを色々持っているAr</description>
    </item>
    
    <item>
      <title>200が返ってこないURLを見つけるワンライナー</title>
      <link>https://dream-yt.github.io/post/find-non-200pk-url-oneliner/</link>
      <pubDate>Thu, 28 Feb 2019 08:36:33 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/find-non-200pk-url-oneliner/</guid>
      <description>./urllist.txt にはURLのリストが入ってるとして そのなかから404とかになってるURLを見つけたい場合 以下のコマンドでダメなURLだけ表示してくれる $ cat</description>
    </item>
    
    <item>
      <title>htmlで、雑にformから送信される値を見たい</title>
      <link>https://dream-yt.github.io/post/adhoc-formdata-logging/</link>
      <pubDate>Tue, 26 Feb 2019 12:47:49 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/adhoc-formdata-logging/</guid>
      <description>submitイベントを途中で止める FormDataクラスをつかう こんなコードを仕込めば値が一覧できる const form = document.querySelector(&#39;form&#39;); form.addEventListener(&#39;submit&#39;, (event) =&amp;gt; { const formData = new FormData(form); for (let i of formData.entries()) { console.log(i.join(&amp;quot;\t&amp;quot;));</description>
    </item>
    
    <item>
      <title>gitでsubmoduleをcloneする</title>
      <link>https://dream-yt.github.io/post/git-submodule-recursive/</link>
      <pubDate>Sun, 24 Feb 2019 22:34:40 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/git-submodule-recursive/</guid>
      <description>こんなオプションでできる $ git submodule update --init --recursive</description>
    </item>
    
    <item>
      <title>GoogleSpreadSheetへBigQueryからクエリできるようにする</title>
      <link>https://dream-yt.github.io/post/query-google-spreadsheet-with-bigquery/</link>
      <pubDate>Sun, 24 Feb 2019 17:28:42 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/query-google-spreadsheet-with-bigquery/</guid>
      <description>こんなコマンドでspreadsheetをbigqueryのテーブルのように使うことができる $ bq mk --external_table_definition=[SCHEMA]@[SOURCE_FORMAT]=[GOOGLE_DRIVE_URL] \ [DATASET_ID].[TABLE_NAME] 実際の値をいれるとこんな感じ $ export GOOGLE_SHEETS=&#39;https://docs.google.com/spreadsheets/d/1r--MIJGEuZSgx9KMQxyAOL9S80cZaV8BM/edit#gid=1436148405&#39; $ export</description>
    </item>
    
    <item>
      <title>bigqueryのtransfer_configの実行履歴の確認の仕方</title>
      <link>https://dream-yt.github.io/post/bigquery-transfer-log/</link>
      <pubDate>Sun, 24 Feb 2019 10:50:59 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/bigquery-transfer-log/</guid>
      <description>transfer_config 設定されているtransfer_configを一覧 $ bq --format=json ls --transfer_config --transfer_location=&#39;us&#39; | jq . transfer_run name を引数に渡してtransfer_runを一覧 $ bq --format=json ls --transfer_run --transfer_location=&#39;us&#39; \ projects/987573330809/locations/us/transferConfigs/5c5aff8c-0000-285b-bf15-089e08324cf4 summary 実行</description>
    </item>
    
    <item>
      <title>typescriptで特定ファイルのコンパイルエラーだけdisableする</title>
      <link>https://dream-yt.github.io/post/typescript-ts-ignore/</link>
      <pubDate>Sat, 23 Feb 2019 19:57:57 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/typescript-ts-ignore/</guid>
      <description>typescriptのコンパイラオプションは一般的にはtsconfig.jsonでプロジェクト全体のコンパイルの設定を定義することになる。た</description>
    </item>
    
    <item>
      <title>lambda/typescriptでexpressを使う</title>
      <link>https://dream-yt.github.io/post/express-serverless-typescript/</link>
      <pubDate>Sat, 23 Feb 2019 12:02:54 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/express-serverless-typescript/</guid>
      <description>express普通に便利なのでawslabs謹製のツールから使う awslabs/aws-serverless-express Run serverless applications and REST APIs using your existing Node.js application framework, on top of AWS Lambda and Amazon API Gateway 使い方 expressのappを生</description>
    </item>
    
    <item>
      <title>テキストに不可視な文字が入っている場合の対処</title>
      <link>https://dream-yt.github.io/post/invisible-char-in-textfile/</link>
      <pubDate>Thu, 14 Feb 2019 17:11:00 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/invisible-char-in-textfile/</guid>
      <description>不可視文字には \t (タブ) や \f (改ページ)など色々ある 環境によってトーフが表示されたりする 例 エディタでは大丈夫なのにGitHubに投稿するとト</description>
    </item>
    
    <item>
      <title>macで動画のビットレートを変更したい</title>
      <link>https://dream-yt.github.io/post/ffmpeg-for-bitrate/</link>
      <pubDate>Wed, 13 Feb 2019 15:20:54 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/ffmpeg-for-bitrate/</guid>
      <description>ffmpegを使う $ brew install ffmpeg こんな感じで使う $ ffmpeg -i ./inputfile.mp4 -b:v 2M -bufsize 10M ./outfile.mp4 -b:v 2M 指定したいbitrate。KBで指定したい場合は 320K のようにKを使う -bufsize 10M どれく</description>
    </item>
    
    <item>
      <title>BigQueryのtransfer_configを表示する</title>
      <link>https://dream-yt.github.io/post/bigquery-show-data-transfer-service/</link>
      <pubDate>Tue, 29 Jan 2019 22:32:51 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/bigquery-show-data-transfer-service/</guid>
      <description>以下の要領で表示できる $ bq --format=json ls --transfer_config --transfer_location=&#39;us&#39; $ bq show --transfer_config projects/123456789/locations/us/transferConfigs/xxxxxx 出力される設定はこんな感じ ( --format=json ) bq mk にこの形式のjsonを食わせると設定できるのだろうか? 🤔 $ bq</description>
    </item>
    
    <item>
      <title>Bigquery Data Transfer Service について</title>
      <link>https://dream-yt.github.io/post/bigquery-data-transfer-service/</link>
      <pubDate>Tue, 29 Jan 2019 08:43:23 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/bigquery-data-transfer-service/</guid>
      <description>$ bq mk --table --help で今まで知らなかったオプションを見つけた --[no]transfer_config: Create transfer config. --[no]transfer_run: Creates transfer runs for a time range. アドタグやGAのデータを自動的にBigQueryに取り込める設定の</description>
    </item>
    
    <item>
      <title>特定のファイルを消したコミットを確認する</title>
      <link>https://dream-yt.github.io/post/git-log-deleted-file/</link>
      <pubDate>Fri, 25 Jan 2019 13:49:58 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/git-log-deleted-file/</guid>
      <description>以下のコマンドで確認できる $ git log --diff-filter=D -- path/to/targetfile.pl -- 以降にファイル名を渡すとそのファイルの履歴だけ見ることが出来る [--] &amp;lt;path&amp;gt;... Show only commits that are enough to explain how the files that match the specified paths came</description>
    </item>
    
    <item>
      <title>Spreadsheetで下までコピペ</title>
      <link>https://dream-yt.github.io/post/spreadsheet-cell-copy/</link>
      <pubDate>Thu, 24 Jan 2019 08:58:09 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/spreadsheet-cell-copy/</guid>
      <description>同じ関数を相対参照で一番下の行までコピペしたいとき ＋マークをダブルクリックすると下まで行く その他 コピペと呼んでいるものにも2種類ある セルのコ</description>
    </item>
    
    <item>
      <title>VLOOKUPの使い方をメモ</title>
      <link>https://dream-yt.github.io/post/spreadsheet-vlookup/</link>
      <pubDate>Wed, 23 Jan 2019 09:40:35 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/spreadsheet-vlookup/</guid>
      <description>自分で使ったことがなかったので勉強 概要 指定した表のなかから条件にマッチした行の、指定したカラムの値を返してくれる VLOOKUP(検索キー, 範</description>
    </item>
    
    <item>
      <title>There is no document formatter for &#39;sql&#39;-files installed</title>
      <link>https://dream-yt.github.io/post/vscode-sql-formatter-stun/</link>
      <pubDate>Tue, 22 Jan 2019 12:52:05 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/vscode-sql-formatter-stun/</guid>
      <description>vscodeを使っている。SQLファイルは保存時にフォーマットされるようしているが、 ある日突然保存時フォーマットが聞かなくなった vscode</description>
    </item>
    
    <item>
      <title>ALBの直近1時間のリクエスト数をawscliで取得する</title>
      <link>https://dream-yt.github.io/post/alb-request-count-by-awscli/</link>
      <pubDate>Sun, 20 Jan 2019 15:05:24 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/alb-request-count-by-awscli/</guid>
      <description>以下のコマンドで取得できる aws cloudwatch --profile mossan get-metric-statistics \ --namespace &#39;AWS/ApplicationELB&#39; \ --metric-name &#39;RequestCount&#39; \ --dimensions &#39;Name=LoadBalancer,Value=app/sakamoto-alb/xxxxxxxxx&#39; \ --statistics &#39;Sum&#39; \ --start-time $(date -v -1H -u +&amp;quot;%Y-%m-%dT%H:%M&amp;quot;) \ --end-time $(date -u +&amp;quot;%Y-%m-%dT%H:%M&amp;quot;) \ --period 3600 --dimensions RequestCountのSumをどの軸でGro</description>
    </item>
    
    <item>
      <title>AWSでプロジェクトに存在するALBを一覧する</title>
      <link>https://dream-yt.github.io/post/list-alb-names/</link>
      <pubDate>Sun, 20 Jan 2019 14:57:42 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/list-alb-names/</guid>
      <description>aws cloudwatch list-metrics \ --namespace AWS/ApplicationELB \ --metric-name RequestCount \ | jq -r &#39;.Metrics[].Dimensions[] | select(.Name | test(&amp;quot;LoadBalancer&amp;quot;)) | .Value&#39; \ | sort \ | uniq jq の部分はjsonから必要な部分を抜き出すためのもの 配列を Name=LoadBalancer なオブジェクトにフィルタして</description>
    </item>
    
    <item>
      <title>athenaのUNIXタイムスタンプなカラムをJSTで一昨日から昨日の範囲でとる場合</title>
      <link>https://dream-yt.github.io/post/athena-before-yesterday-utc-jst/</link>
      <pubDate>Sun, 20 Jan 2019 12:25:05 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/athena-before-yesterday-utc-jst/</guid>
      <description>下記の図でJSTでの18日〜19日のデータが欲しい場合のこと 前提 日本で使いたいデータなので「日本時間での一昨日から昨日」 カラムにはunixタ</description>
    </item>
    
    <item>
      <title>PythonでTimezone Aware(Jst)なdatetimeを作る</title>
      <link>https://dream-yt.github.io/post/python-jst-timezone-aware-datetime/</link>
      <pubDate>Sat, 12 Jan 2019 23:42:03 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/python-jst-timezone-aware-datetime/</guid>
      <description>ググっても簡単なのが出てこなかったのでメモ 環境は python 3.6.7 こんな定義で引数に渡した日付時間がJSTのdatetimeになる from pytz import timezone def jst_datetime(*args): rest = [0] * (7 -</description>
    </item>
    
    <item>
      <title>hostileで/etc/hostsをテキスト管理する</title>
      <link>https://dream-yt.github.io/post/etc-hosts-hostile/</link>
      <pubDate>Mon, 07 Jan 2019 17:24:25 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/etc-hosts-hostile/</guid>
      <description>feross/hostile: Simple, programmatic /etc/hosts manipulation (in node.js) install インストールはyarnで入る (brewとかは用意されてなさそう) $ yarn global add hostile load hostile load コマンドで引数に渡した定義が/etc/hos</description>
    </item>
    
    <item>
      <title>AudioConverterNew returned -50</title>
      <link>https://dream-yt.github.io/post/macmini-audioconverternew-50/</link>
      <pubDate>Wed, 02 Jan 2019 20:13:32 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/macmini-audioconverternew-50/</guid>
      <description>2019-01-02 18:56:01.693434+0900 MyAPP[7575:859800] [AQ] 1154: AudioConverterNew returned -50 Mac miniでAVAudioRecorderを使おうと際にすると出るwarning macbookなどには音声入力があるが、Ma</description>
    </item>
    
    <item>
      <title>loguruとnotifiersを使ってslack通知をする</title>
      <link>https://dream-yt.github.io/post/loguru-notifiers/</link>
      <pubDate>Wed, 02 Jan 2019 12:55:49 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/loguru-notifiers/</guid>
      <description>前提 slackはincomming webhookをdeprecateとしている notifiersはincomming webhookにしか対応</description>
    </item>
    
    <item>
      <title>最近払い出した Slackの Incoming Webhooks で通知チャンネルを変更する</title>
      <link>https://dream-yt.github.io/post/slack-webhook-deprecated/</link>
      <pubDate>Wed, 02 Jan 2019 12:29:19 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/slack-webhook-deprecated/</guid>
      <description>残念 変更できないので調べたところ、 もうIncoming Webhooksでは通知チャンネルが変更できなくなっている Deprecated ドキュメントを見に行ったら</description>
    </item>
    
    <item>
      <title>vscodeでエラーメッセージを英語にする</title>
      <link>https://dream-yt.github.io/post/vscode-locale-change/</link>
      <pubDate>Tue, 25 Dec 2018 14:59:41 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/vscode-locale-change/</guid>
      <description>表示言語の設定は設定ファイルとは別ファイル管理になっている 以下のファイルで設定されている ~/Library/Application\ Support/Code/User/locale.json localeの値をよしなに変更すれば良い { // VS Code</description>
    </item>
    
    <item>
      <title>JavaScript heap out of memory になんとなくで対処する場合とchromeでデバッグする場合</title>
      <link>https://dream-yt.github.io/post/javascript-heap-out-of-memory/</link>
      <pubDate>Sun, 16 Dec 2018 12:05:36 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/javascript-heap-out-of-memory/</guid>
      <description>例えばwebpackの処理で以下のエラーが出た場合の話 $ serverless deploy --function App --stage prod Serverless: Bundling with Webpack... ...中略... FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory 1: node::Abort() [~/.nodebrew/node/v8.10.0/bin/node] 2: node::FatalException(v8::Isolate*, v8::Local&amp;lt;v8::Value&amp;gt;, v8::Local&amp;lt;v8::Message&amp;gt;) [~/.nodebrew/node/v8.10.0/bin/node] ...中略</description>
    </item>
    
    <item>
      <title>mongodump/mongoexportのやりかた</title>
      <link>https://dream-yt.github.io/post/mongodump-101/</link>
      <pubDate>Fri, 14 Dec 2018 13:11:58 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/mongodump-101/</guid>
      <description>mongoexport ってのでjson形式で吐き出せる (jqを使って作業がしやすい) mongoexport \ --host=aws-singapore-free-shard-00-01-xxxx.mongodb.net \ --port=27017 \ --username=app \ --authenticationDatabase=admin \ --password=xxxxxx \ --ssl \ --db=abcd \ --collection=profiles \ --out /tmp/profiles.json</description>
    </item>
    
    <item>
      <title>vscodeからdockerコンテナ内でperl -wcして文法チェック</title>
      <link>https://dream-yt.github.io/post/vscode-perl-docker-linter/</link>
      <pubDate>Wed, 12 Dec 2018 08:12:58 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/vscode-perl-docker-linter/</guid>
      <description>こちらを使うと簡単に出来た henriiik/vscode-docker-linter: Lint the things in your docker containers 設定 設定項目もこれくらいで済む &amp;quot;docker-linter.perl.enable&amp;quot;: true, &amp;quot;docker-linter.perl.machine&amp;quot;: &amp;quot;&amp;quot;, // &amp;quot;default&amp;quot;だとdocker-m</description>
    </item>
    
    <item>
      <title>cloudwatch、アラームの設定 (period, treatMissingData)</title>
      <link>https://dream-yt.github.io/post/cloudwatch-alarm-treatmissingdata/</link>
      <pubDate>Sun, 09 Dec 2018 14:07:39 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/cloudwatch-alarm-treatmissingdata/</guid>
      <description>serverless-plugin-aws-alerts を使うとアラームの設定/適用まで簡単に出来る ACloudGuru/serverless-plugin-aws-alerts: A Serverless Framework plugin that creates CloudWatch alarms for functions. 以下の設定項目はパッと見で分からなかったのでメモ period treatMissingData period メトリクスの数値を</description>
    </item>
    
    <item>
      <title>serverless deploy で生成されるリソースを事前に確認する</title>
      <link>https://dream-yt.github.io/post/sls-package-cloudformation-stack/</link>
      <pubDate>Sat, 08 Dec 2018 23:48:03 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/sls-package-cloudformation-stack/</guid>
      <description>serverlessのプラグインを使うと色々なリソースを勝手に作ってくれたりして便利だが、実行するまでプラグインのyaml設定が思い通りにな</description>
    </item>
    
    <item>
      <title>いまのブランチでいじってるファイルをいっぺんにvscodeで開く</title>
      <link>https://dream-yt.github.io/post/git-branch-diff-files-open-vscode/</link>
      <pubDate>Thu, 06 Dec 2018 14:25:18 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/git-branch-diff-files-open-vscode/</guid>
      <description>なお、ブランチはmasterから派生させている前提 コマンド全体 最初にmasterから分岐した箇所のコミットハッシュを取得している BASE=$(git show-branch --merge-base master HEAD); git</description>
    </item>
    
    <item>
      <title>環境変数にセットしてあるGoogleのJWTを使って認証する</title>
      <link>https://dream-yt.github.io/post/enviroment-value-google-jwt-credential/</link>
      <pubDate>Tue, 04 Dec 2018 10:05:39 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/enviroment-value-google-jwt-credential/</guid>
      <description>GoogleのAPIを叩く際に、GOOGLE_APPLICATION_CREDENTIALSを使ってファイルから認証情報を読み取る例は書いて</description>
    </item>
    
    <item>
      <title>サービスアカウントで認証してGoogleSpreadsheetからデータを取得</title>
      <link>https://dream-yt.github.io/post/spreadsheet-via-service-account/</link>
      <pubDate>Sat, 01 Dec 2018 16:30:16 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/spreadsheet-via-service-account/</guid>
      <description>spreadsheetのデータを取ってくるやり方をググったらいいのが見つからなかった 認証周りをガバガバでやってそう 古い認証方式(oauth</description>
    </item>
    
    <item>
      <title>commitを別の作業branchへ移動する方法</title>
      <link>https://dream-yt.github.io/post/git-cherry-pick/</link>
      <pubDate>Wed, 28 Nov 2018 22:27:25 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/git-cherry-pick/</guid>
      <description>これは一体 Gitで何度も陥ってしまう過ちにまたハマってしまう日が来ても、乗り越えられる自分でありたい。 そのための備忘録です。 状況 新しい作業の</description>
    </item>
    
    <item>
      <title>pythonの__del__</title>
      <link>https://dream-yt.github.io/post/python-__del__/</link>
      <pubDate>Mon, 26 Nov 2018 12:21:22 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/python-__del__/</guid>
      <description>軽くドキュメントを読んでメモ 次のような雰囲気のメソッドのようだ デストラクタとして使わない やむおえない時だけ使う 変な使い方はしない ドキュメント</description>
    </item>
    
    <item>
      <title>Lambdaでcallbackを呼んでるのにタイムアウト扱いになる場合</title>
      <link>https://dream-yt.github.io/post/lambda-callbackwaitsforemptyeventloop/</link>
      <pubDate>Sat, 24 Nov 2018 12:47:49 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/lambda-callbackwaitsforemptyeventloop/</guid>
      <description>lambdaはcallbackが呼ばれても、イベントループが残っていたらプロセスを待機させてしまう。使用しているライブラリがコネクションをポ</description>
    </item>
    
    <item>
      <title>macosでパイプで翻訳してくれるtransコマンドを使う</title>
      <link>https://dream-yt.github.io/post/trans-command-on-macos/</link>
      <pubDate>Fri, 23 Nov 2018 14:18:17 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/trans-command-on-macos/</guid>
      <description>soimort/translate-shell: Command-line translator using Google Translate, Bing Translator, Yandex.Translate, DeepL Translator, etc. インストール brew install gawk # 依存してるのでmacosの場合必要 sudo wget git.io/trans -O /usr/local/bin/trans sudo chmod +x /usr/local/bin/trans 使い方 $ trans --help | head -1 Usage: trans [OPTIONS] [SOURCE]:[TARGETS] [TEXT]... 例えば 日本語(j</description>
    </item>
    
    <item>
      <title>LambdaのエラーをコーディングなしでSlack通知までしてもらう設定</title>
      <link>https://dream-yt.github.io/post/codeless-lambda-error-slack-notify/</link>
      <pubDate>Fri, 23 Nov 2018 14:04:09 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/codeless-lambda-error-slack-notify/</guid>
      <description>serverlessを使っている前提 slackの bring emails into slack を使う slack通知用のメールアドレスを取得 このアドレスにメールを送ると、内容がsl</description>
    </item>
    
    <item>
      <title>的外れな言葉に傷つく前に読む雑記</title>
      <link>https://dream-yt.github.io/post/zakki-181120-dream/</link>
      <pubDate>Tue, 20 Nov 2018 23:59:56 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/zakki-181120-dream/</guid>
      <description>これは一体 文章を書く練習の一貫で、最近思ったことを書く。 箇条書きと文章を使い分けられるいいかんじの人を目指して。 雑記です。もう。 身の回りでも</description>
    </item>
    
    <item>
      <title>aws-cdkを使い始めるまでメモ</title>
      <link>https://dream-yt.github.io/post/aws-cdk-101/</link>
      <pubDate>Sat, 17 Nov 2018 22:30:32 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/aws-cdk-101/</guid>
      <description>プロジェクトを作成する app ってのはサブコマンドで、「アプリ開発者として使う」という意味 (libってのがあって、それはcdkのライブラリ作者が使</description>
    </item>
    
    <item>
      <title>年末調整で毎回調べる諸々</title>
      <link>https://dream-yt.github.io/post/salary-man-year-end-adjustment/</link>
      <pubDate>Sat, 17 Nov 2018 11:41:24 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/salary-man-year-end-adjustment/</guid>
      <description>年末調整で毎回調べる諸々 源泉徴収とは サラリーマンも税金を払う必要があるが、 それを会社が代わりに徴収してくれる制度のこと 【完全版】5分で理解で</description>
    </item>
    
    <item>
      <title>【ロゴ作成】RGBとCMYKの色マニュアルを作った時の備忘録</title>
      <link>https://dream-yt.github.io/post/logo-colormode/</link>
      <pubDate>Wed, 07 Nov 2018 12:51:45 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/logo-colormode/</guid>
      <description>状況 新ロゴができたので、RGBとCMYKで色のマニュアルを作る。 が。 RGBで作成したAiデータをCMYKに変換しただけでは、色が変わってしま</description>
    </item>
    
    <item>
      <title>athenacliを使う</title>
      <link>https://dream-yt.github.io/post/gettingstarted-athenacli/</link>
      <pubDate>Sat, 03 Nov 2018 18:11:44 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/gettingstarted-athenacli/</guid>
      <description>awscliにはathenaサブコマンドが用意されているが、gcpのbqコマンドのように便利な雰囲気ではない athena — AWS CLI 1.16.47 Command Reference シェルスクリプトに</description>
    </item>
    
    <item>
      <title>jq での変形例 (keys[]でのオブジェクト=&gt;オブジェクト編) </title>
      <link>https://dream-yt.github.io/post/jq-sample-keys-obj-children/</link>
      <pubDate>Sat, 03 Nov 2018 17:45:49 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/jq-sample-keys-obj-children/</guid>
      <description>こんなjsonがあって { &amp;quot;xxxxxx&amp;quot;: { &amp;quot;_name&amp;quot;: &amp;quot;トーマス&amp;quot;, &amp;quot;children&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;トーマス（男性向け）&amp;quot;, &amp;quot;code&amp;quot;: &amp;quot;41080&amp;quot; }, { &amp;quot;code&amp;quot;: &amp;quot;41081&amp;quot;, &amp;quot;name&amp;quot;: &amp;quo</description>
    </item>
    
    <item>
      <title>GoogleSpreadsheetのデータ(csv)をパパッとjsonにしてスクリプトから使う</title>
      <link>https://dream-yt.github.io/post/googlespreadsheet-csv-json-perl/</link>
      <pubDate>Sat, 03 Nov 2018 17:24:38 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/googlespreadsheet-csv-json-perl/</guid>
      <description>csvjsonを使うとcsv =&amp;gt; json が簡単に変換できる csvjsonはcsvkitをインストールすると入ってくる $ brew install csvkit ... $ which csvjson /usr/local/bin/csvjson csvでダウン</description>
    </item>
    
    <item>
      <title>起業の科学の読書メモ</title>
      <link>https://dream-yt.github.io/post/startup-sci/</link>
      <pubDate>Sun, 28 Oct 2018 18:14:17 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/startup-sci/</guid>
      <description>会社でみんなで読もうみたいな機運だったのでちゃんと読みました 市場分析フレームワークの図鑑みたいな内容 前半部分、起業以前のところは一般常識とし</description>
    </item>
    
    <item>
      <title>BigQueryの日付分割テーブルを使う</title>
      <link>https://dream-yt.github.io/post/bq-time_partitioning_field/</link>
      <pubDate>Sun, 28 Oct 2018 02:24:40 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/bq-time_partitioning_field/</guid>
      <description>bigqueryで探索するディスク領域を節約する方法は過去たくさんあった _YYYYMMDD suffix pattern using the _PARTITIONTIME pseudo-column これはまだ今でも現役なところが多そう TIMESTAMP</description>
    </item>
    
    <item>
      <title>dockerコンテナ内でstraceを使う</title>
      <link>https://dream-yt.github.io/post/strace-in-docker-container/</link>
      <pubDate>Wed, 24 Oct 2018 23:36:47 +0900</pubDate>
      
      <guid>https://dream-yt.github.io/post/strace-in-docker-container/</guid>
      <description>docker runに起動オブションをつけないとstraceは実行できない これはセキュリティの見地からdocker内では呼んで良いシステムコールが制限さ</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dream-yt.github.io/post/bigquery-bq-maximum_bytes_billed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dream-yt.github.io/post/bigquery-bq-maximum_bytes_billed/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>